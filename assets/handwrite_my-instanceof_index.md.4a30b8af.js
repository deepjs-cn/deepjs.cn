import{_ as s,o as n,c as a,V as l}from"./chunks/framework.75ed6a74.js";const o=JSON.parse('{"title":"实现 instanceof 关键字","description":"","frontmatter":{},"headers":[],"relativePath":"handwrite/my-instanceof/index.md","filePath":"handwrite/my-instanceof/index.md"}'),e={name:"handwrite/my-instanceof/index.md"},p=[l('<h1 id="实现-instanceof-关键字" tabindex="-1">实现 <code>instanceof</code> 关键字 <a class="header-anchor" href="#实现-instanceof-关键字" aria-label="Permalink to &quot;实现 `instanceof` 关键字&quot;">​</a></h1><ul><li><code>instanceof</code> 是用来判断 A 是否为 B 的实例, 表达式为：<code>A instanceof B</code><ul><li>如果 <code>A</code> 是 <code>B</code> 的实例, 则返回 <code>true</code>, 否则返回 <code>false</code>。</li></ul></li><li><code>instanceof</code> 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 <code>prototype</code> 属性。</li><li>不能检测基本数据类型, 在原型链上的结果未必准确, 不能检测 <code>null</code>, <code>undefined</code></li><li>实现：遍历左边变量的原型链, 直到找到右边变量的 <code>prototype</code>, 如果没有找到, 返回 <code>false</code></li></ul><p>实现步骤</p><ol><li>首先获得类型的原型</li><li>然后获得对象的原型</li><li>然后一致循环判断对象的原型是否等于类型的原型，知道对象原型为 <code>null</code>，因为原型链最终为 <code>null</code></li></ol><details class="details custom-block"><summary>点我查看详细</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 实现 `instanceof` 关键字</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// __proto__ 已废弃, 建议使用 Object.getPrototypeOf() (其兼容性已非常好)</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">myInstanceof2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// let left = a.__proto__;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">proto</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 获取对象的原型</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">right</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 获取构造函数的 prototype 对象</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 判断构造函数的 prototype 对象是否在对象的原型链上</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">proto</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">proto</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">proto</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">proto</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></details>',5)];const t=s(e,[["render",function(s,l,o,e,t,c){return n(),a("div",null,p)}]]);export{o as __pageData,t as default};
