import{_ as s,o as n,c as a,V as l}from"./chunks/framework.75ed6a74.js";const e=JSON.parse('{"title":"TypeScript","description":"","frontmatter":{},"headers":[{"level":3,"title":"const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？","slug":"const-和-readonly-的区别-枚举和常量枚举的区别-接口和类型别名的区别","link":"#const-和-readonly-的区别-枚举和常量枚举的区别-接口和类型别名的区别","children":[]},{"level":3,"title":"any 类型的作用是什么？","slug":"any-类型的作用是什么","link":"#any-类型的作用是什么","children":[]},{"level":3,"title":"any、never、unknown、null & undefined 和 void 有什么区别？","slug":"any、never、unknown、null-undefined-和-void-有什么区别","link":"#any、never、unknown、null-undefined-和-void-有什么区别","children":[]},{"level":3,"title":"interface 可以给 Function / Array / Class（Indexable）做声明吗？","slug":"interface-可以给-function-array-class-indexable-做声明吗","link":"#interface-可以给-function-array-class-indexable-做声明吗","children":[]},{"level":3,"title":"可以给 String、Number、Boolean、Symbol、Object 等给类型做声明吗？","slug":"可以给-string、number、boolean、symbol、object-等给类型做声明吗","link":"#可以给-string、number、boolean、symbol、object-等给类型做声明吗","children":[]},{"level":3,"title":"的 this 和 JavaScript 中的 this 有什么差异？","slug":"的-this-和-javascript-中的-this-有什么差异","link":"#的-this-和-javascript-中的-this-有什么差异","children":[]},{"level":3,"title":"使用 Union Types 时有哪些注意事项？","slug":"使用-union-types-时有哪些注意事项","link":"#使用-union-types-时有哪些注意事项","children":[]},{"level":3,"title":"TypeScript 如何设计 Class 的声明？","slug":"typescript-如何设计-class-的声明","link":"#typescript-如何设计-class-的声明","children":[]},{"level":3,"title":"如何联合枚举类型的 Key?","slug":"如何联合枚举类型的-key","link":"#如何联合枚举类型的-key","children":[]},{"level":3,"title":"type 和 interface 的区别?","slug":"type-和-interface-的区别","link":"#type-和-interface-的区别","children":[]},{"level":3,"title":"?.、??、!、!.、_、** 等符号的含义？","slug":"、-、-、-、-、-等符号的含义","link":"#、-、-、-、-、-等符号的含义","children":[]},{"level":3,"title":"简单介绍一下 TypeScript 模块的加载机制？","slug":"简单介绍一下-typescript-模块的加载机制","link":"#简单介绍一下-typescript-模块的加载机制","children":[]},{"level":3,"title":"简单聊聊你对 TypeScript 类型兼容性的理解？","slug":"简单聊聊你对-typescript-类型兼容性的理解","link":"#简单聊聊你对-typescript-类型兼容性的理解","children":[]},{"level":3,"title":"协变、逆变、双变和抗变的理解？","slug":"协变、逆变、双变和抗变的理解","link":"#协变、逆变、双变和抗变的理解","children":[]},{"level":3,"title":"对象展开会有什么副作用吗？","slug":"对象展开会有什么副作用吗","link":"#对象展开会有什么副作用吗","children":[]},{"level":3,"title":"类型的全局声明和局部声明","slug":"类型的全局声明和局部声明","link":"#类型的全局声明和局部声明","children":[]},{"level":3,"title":"同名的 interface 或者同名的 interface 和 class 可以合并吗？","slug":"同名的-interface-或者同名的-interface-和-class-可以合并吗","link":"#同名的-interface-或者同名的-interface-和-class-可以合并吗","children":[]},{"level":3,"title":"如何使 TypeScript 项目引入并识别编译为 JavaScript 的 npm 库包？","slug":"如何使-typescript-项目引入并识别编译为-javascript-的-npm-库包","link":"#如何使-typescript-项目引入并识别编译为-javascript-的-npm-库包","children":[]},{"level":3,"title":"tsconfig.json 中有哪些配置项信息？","slug":"tsconfig-json-中有哪些配置项信息","link":"#tsconfig-json-中有哪些配置项信息","children":[]},{"level":3,"title":"如何设置模块导入的路径别名？","slug":"如何设置模块导入的路径别名","link":"#如何设置模块导入的路径别名","children":[]},{"level":3,"title":"declare，declare global 是什么？","slug":"declare-declare-global-是什么","link":"#declare-declare-global-是什么","children":[]},{"level":3,"title":"对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？","slug":"对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解","link":"#对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解","children":[]},{"level":3,"title":"keyof 和 typeof 关键字的作用？","slug":"keyof-和-typeof-关键字的作用","link":"#keyof-和-typeof-关键字的作用","children":[]},{"level":3,"title":"简述工具类型 Exclude、Omit、Merge、Intersection、Overwrite 的作用。","slug":"简述工具类型-exclude、omit、merge、intersection、overwrite-的作用。","link":"#简述工具类型-exclude、omit、merge、intersection、overwrite-的作用。","children":[]},{"level":3,"title":"数组定义的两种方式","slug":"数组定义的两种方式","link":"#数组定义的两种方式","children":[]}],"relativePath":"interview/questions/typescript.md","filePath":"interview/questions/typescript.md"}'),p={name:"interview/questions/typescript.md"},o=[l('<h1 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h1><ol><li>为什么要使用 TypeScript ?</li><li>TypeScript 相对于 JavaScript 的优势是什么？</li><li><code>const</code> 和 <code>readonly</code> 的区别？</li><li>枚举和常量枚举的区别？</li><li>接口和类型别名的区别？</li><li><code>any</code> 类型的作用是什么？</li><li><code>any</code>、<code>never</code>、<code>unknown</code> 和 <code>void</code> 有什么区别？</li><li><code>interface</code> 可以给 Function / Array / Class（Indexable）做声明吗？</li><li>可以给 String、Number、Boolean、Symbol、Object 等给类型做声明吗？</li><li>this 和 JavaScript 中的 this 有什么差异？</li><li>使用 Unions 时有哪些注意事项？</li><li>TypeScript 如何设计 Class 的声明？</li><li>如何联合枚举类型的 Key?</li><li><code>?.</code>、<code>??</code>、<code>!.</code>、<code>_</code>、<code>**</code> 等符号的含义？</li><li>预定义的有条件类型有哪些？</li><li>简单介绍一下 TypeScript 模块的加载机制？</li><li>简单聊聊你对 TypeScript 类型兼容性的理解？抗变、双变、协变和逆变的简单理解？</li><li>对象展开会有什么副作用吗？</li><li>interface、type、enum 声明有作用域的功能吗？</li><li>同名的 interface 或者同名的 interface 和 class 可以合并吗？</li><li>如何使 TypeScript 项目引入并识别编译为 JavaScript 的 npm 库包？</li><li>tsconfig.json 中有哪些配置项信息？</li><li>如何设置模块导入的路径别名？</li></ol><h3 id="const-和-readonly-的区别-枚举和常量枚举的区别-接口和类型别名的区别" tabindex="-1"><code>const</code> 和 <code>readonly</code> 的区别？枚举和常量枚举的区别？接口和类型别名的区别？ <a class="header-anchor" href="#const-和-readonly-的区别-枚举和常量枚举的区别-接口和类型别名的区别" aria-label="Permalink to &quot;`const` 和 `readonly` 的区别？枚举和常量枚举的区别？接口和类型别名的区别？&quot;">​</a></h3><p>const 和 readonly: const 可以防止变量的值被修改，readonly 可以防止变量的属性被修改。</p><p>枚举和常量枚举: 常量枚举只能使用常量枚举表达式，并且不同于常规的枚举，它们在编译阶段会被删除。 常量枚举成员在使用的地方会被内联进来。 之所以可以这么做是因为，常量枚举不允许包含计算成员。</p><p>接口和类型别名: 两者都可以用来描述对象或函数的类型。与接口不同，类型别名还可以用于其他类型，如基本类型（原始值）、联合类型、元组。</p><h3 id="any-类型的作用是什么" tabindex="-1">any 类型的作用是什么？ <a class="header-anchor" href="#any-类型的作用是什么" aria-label="Permalink to &quot;any 类型的作用是什么？&quot;">​</a></h3><p>为编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。</p><h3 id="any、never、unknown、null-undefined-和-void-有什么区别" tabindex="-1">any、never、unknown、null &amp; undefined 和 void 有什么区别？ <a class="header-anchor" href="#any、never、unknown、null-undefined-和-void-有什么区别" aria-label="Permalink to &quot;any、never、unknown、null &amp; undefined 和 void 有什么区别？&quot;">​</a></h3><ul><li><code>any</code>: 动态的变量类型（失去了类型检查的作用）。</li><li><code>never</code>: 永不存在的值的类型。例如：<code>never</code> 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。</li><li><code>unknown</code>: 任何类型的值都可以赋给  <code>unknown</code>  类型，但是  <code>unknown</code>  类型的值只能赋给  <code>unknown</code>  本身和  any  类型。</li><li><code>null &amp; undefined</code>: 默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。 就是说你可以把  <code>null</code> 和 <code>undefined</code> 赋值给 <code>number</code> 类型的变量。当你指定了 <code>--strictNullChecks</code> 标记，<code>null</code> 和 <code>undefined</code> 只能赋值给 <code>void</code> 和它们自己。</li><li><code>void</code>: 没有任何类型。例如：一个函数如果没有返回值，那么返回值可以定义为 <code>void</code>。</li></ul><h3 id="interface-可以给-function-array-class-indexable-做声明吗" tabindex="-1">interface 可以给 Function / Array / Class（Indexable）做声明吗？ <a class="header-anchor" href="#interface-可以给-function-array-class-indexable-做声明吗" aria-label="Permalink to &quot;interface 可以给 Function / Array / Class（Indexable）做声明吗？&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* 可以 */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 函数声明</span></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Say</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> say</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Say</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// Array 声明</span></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NumberArray</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> fibonacci</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NumberArray</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// Class 声明</span></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PersonalIntl</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sayHi</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="可以给-string、number、boolean、symbol、object-等给类型做声明吗" tabindex="-1">可以给 String、Number、Boolean、Symbol、Object 等给类型做声明吗？ <a class="header-anchor" href="#可以给-string、number、boolean、symbol、object-等给类型做声明吗" aria-label="Permalink to &quot;可以给 String、Number、Boolean、Symbol、Object 等给类型做声明吗？&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* 可以 */</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bob</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> decLiteral</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> isDone</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sym</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">symbol</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="的-this-和-javascript-中的-this-有什么差异" tabindex="-1">的 this 和 JavaScript 中的 this 有什么差异？ <a class="header-anchor" href="#的-this-和-javascript-中的-this-有什么差异" aria-label="Permalink to &quot;的 this 和 JavaScript 中的 this 有什么差异？&quot;">​</a></h3><ul><li>TypeScript：<code>noImplicitThis: true</code> 的情况下，必须去声明 <code>this</code> 的类型，才能在函数或者对象中使用 <code>this</code>。</li><li>箭头函数的 <code>this</code> 和 ES6 中箭头函数中的 <code>this</code> 是一致的。</li></ul><h3 id="使用-union-types-时有哪些注意事项" tabindex="-1">使用 Union Types 时有哪些注意事项？ <a class="header-anchor" href="#使用-union-types-时有哪些注意事项" aria-label="Permalink to &quot;使用 Union Types 时有哪些注意事项？&quot;">​</a></h3><p>属性或方法访问: 当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getLength</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">something</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">something</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// index.ts(2,22): error TS2339: Property &#39;length&#39; does not exist on type &gt;&#39;string | number&#39;.</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">//   Property &#39;length&#39; does not exist on type &#39;number&#39;.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">something</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">something</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 公共方法和属性可以访问</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="typescript-如何设计-class-的声明" tabindex="-1">TypeScript 如何设计 Class 的声明？ <a class="header-anchor" href="#typescript-如何设计-class-的声明" aria-label="Permalink to &quot;TypeScript 如何设计 Class 的声明？&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 在声明类的时候，一般类中都会包含:</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 构造函数、对构造函数中的属性进行类型声明、类中的方法。</span></span>\n<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Greeter</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">greeting</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">greeting</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">message</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">greet</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">greeting</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> greeter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Greeter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="如何联合枚举类型的-key" tabindex="-1">如何联合枚举类型的 Key? <a class="header-anchor" href="#如何联合枚举类型的-key" aria-label="Permalink to &quot;如何联合枚举类型的 Key?&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">strEnum</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  A</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  B</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  C</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">strUnion</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">keyof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> strEnum </span><span style="color:#676E95;font-style:italic;">// &#39;A&#39; | &#39;B&#39; | &#39;C&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="type-和-interface-的区别" tabindex="-1">type 和 interface 的区别? <a class="header-anchor" href="#type-和-interface-的区别" aria-label="Permalink to &quot;type 和 interface 的区别?&quot;">​</a></h3><p>相同点：</p><ol><li>都可以描述 &#39;对象&#39; 或者 &#39;函数&#39;</li><li>都允许拓展(extends)</li></ol><p>不同点：</p><ol><li>type 可以声明基本类型，联合类型，元组</li><li>type 可以使用 typeof 获取实例的类型进行赋值</li><li>多个相同的 interface 声明可以自动合并</li></ol><p>使用 interface 描述‘数据结构’，使用 type 描述‘类型关系’</p><h3 id="、-、-、-、-、-等符号的含义" tabindex="-1"><code>?.</code>、<code>??</code>、<code>!</code>、<code>!.</code>、<code>_</code>、<code>**</code> 等符号的含义？ <a class="header-anchor" href="#、-、-、-、-、-等符号的含义" aria-label="Permalink to &quot;`?.`、`??`、`!`、`!.`、`_`、`**` 等符号的含义？&quot;">​</a></h3><ul><li><code>?.</code> 可选链 遇到 null 和 undefined 可以立即停止表达式的运行。</li><li><code>??</code> 空值合并运算符 当左侧操作数为 null 或 undefined 时，其返回右侧的操作数，否则返回左侧的操作数。</li><li><code>!</code> 非空断言运算符 x! 将从 x 值域中排除 null 和 undefined</li><li><code>!.</code> 在变量名后添加，可以断言排除 undefined 和 null 类型</li><li><code>_</code> 数字分割符 分隔符不会改变数值字面量的值，使人更容易读懂数字 .e.g 1_101_324。</li><li><code>**</code> 求幂</li></ul><h3 id="简单介绍一下-typescript-模块的加载机制" tabindex="-1">简单介绍一下 TypeScript 模块的加载机制？ <a class="header-anchor" href="#简单介绍一下-typescript-模块的加载机制" aria-label="Permalink to &quot;简单介绍一下 TypeScript 模块的加载机制？&quot;">​</a></h3><p>假设有一个导入语句  <code>import { a } from &#39;moduleA&#39;</code>;</p><ol><li>首先，编译器会尝试定位需要导入的模块文件，通过绝对或者相对的路径查找方式；</li><li>如果上面的解析失败了，没有查找到对应的模块，编译器会尝试定位一个 <code>外部模块声明（.d.ts）</code>；</li><li>最后，如果编译器还是不能解析这个模块，则会抛出一个错误 <code>error TS2307: Cannot find module &#39;moduleA&#39;</code>.</li></ol><h3 id="简单聊聊你对-typescript-类型兼容性的理解" tabindex="-1">简单聊聊你对 TypeScript 类型兼容性的理解？ <a class="header-anchor" href="#简单聊聊你对-typescript-类型兼容性的理解" aria-label="Permalink to &quot;简单聊聊你对 TypeScript 类型兼容性的理解？&quot;">​</a></h3><ul><li><code>ts 类型兼容</code>: 当一个类型 Y 可以赋值给另一个类型 X 时， 我们就可以说类型 X 兼容类型 Y。也就是说两者在结构上是一致的，而不一定非得通过 extends 的方式继承而来</li><li><code>接口的兼容性</code>: X = Y 只要目标类型 X 中声明的属性变量在源类型 Y 中都存在就是兼容的（ Y 中的类型可以比 X 中的多，但是不能少）</li><li><code>函数的兼容性：X = Y</code>: Y 的每个参数必须能在 X 里找到对应类型的参数，参数的名字相同与否无所谓，只看它们的类型（参数可以少但是不能多。与接口的兼容性有区别，原因参考第 17 问）</li></ul><h3 id="协变、逆变、双变和抗变的理解" tabindex="-1">协变、逆变、双变和抗变的理解？ <a class="header-anchor" href="#协变、逆变、双变和抗变的理解" aria-label="Permalink to &quot;协变、逆变、双变和抗变的理解？&quot;">​</a></h3><p><code>协变</code>：X = Y Y 类型可以赋值给 X 类型的情况就叫做协变，也可以说是 X 类型兼容 Y 类型</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">X</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Y</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">hobbies</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">X</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xiaoming</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Y</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xiaohong</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">hobbies</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eat</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>逆变</code>：printY = printX 函数 X 类型可以赋值给函数 Y 类型，因为函数 Y 在调用的时候参数是按照 Y 类型进行约束的，但是用到的是函数 X 的 X 的属性和方法，ts 检查结果是类型安全的。这种特性就叫做逆变，函数的参数有逆变的性质。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> printY</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#82AAFF;">printY</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hobbies</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> printX</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">X</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#82AAFF;">printX</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">printY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> printX</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>双变（双向协变）</code>：X = Y；Y = X 父类型可以赋值给子类型，子类型可以赋值给父类型，既逆变又协变，叫做“双向协变”（ts2.x 之前支持这种赋值，之后 ts 加了一个编译选项 strictFunctionTypes，设置为 true 就只支持函数参数的逆变，设置为 false 则支持双向协变）</p><p><code>抗变（不变）</code>：非父子类型之间不会发生型变，只要类型不一样就会报错</p><h3 id="对象展开会有什么副作用吗" tabindex="-1">对象展开会有什么副作用吗？ <a class="header-anchor" href="#对象展开会有什么副作用吗" aria-label="Permalink to &quot;对象展开会有什么副作用吗？&quot;">​</a></h3><ul><li>展开对象后面的属性会覆盖前面的属性；</li><li>仅包含对象自身的可枚举属性，不可枚举的属性将会丢失。</li></ul><h3 id="类型的全局声明和局部声明" tabindex="-1">类型的全局声明和局部声明 <a class="header-anchor" href="#类型的全局声明和局部声明" aria-label="Permalink to &quot;类型的全局声明和局部声明&quot;">​</a></h3><p>如果声明文件内不包含 <code>import</code>、<code>export</code>，那么这个文件声明的类型就会变成全局声明。</p><p>反之，若是这个文件包含了 <code>import</code>、<code>export</code>，那么这个文件包含的类型声明则会是局部声明，不会影响到全局声明。</p><h3 id="同名的-interface-或者同名的-interface-和-class-可以合并吗" tabindex="-1">同名的 interface 或者同名的 interface 和 class 可以合并吗？ <a class="header-anchor" href="#同名的-interface-或者同名的-interface-和-class-可以合并吗" aria-label="Permalink to &quot;同名的 interface 或者同名的 interface 和 class 可以合并吗？&quot;">​</a></h3><ul><li>同名的 interface 会自动合并</li><li>同名的 interface 和 class 会自动聚合。</li></ul><h3 id="如何使-typescript-项目引入并识别编译为-javascript-的-npm-库包" tabindex="-1">如何使 TypeScript 项目引入并识别编译为 JavaScript 的 npm 库包？ <a class="header-anchor" href="#如何使-typescript-项目引入并识别编译为-javascript-的-npm-库包" aria-label="Permalink to &quot;如何使 TypeScript 项目引入并识别编译为 JavaScript 的 npm 库包？&quot;">​</a></h3><ul><li>选择安装 ts 版本，<code>npm install @types/包名 --save</code>；</li><li>对于没有类型的 js 库，需要编写同名的 <code>.d.ts</code> 文件</li></ul><h3 id="tsconfig-json-中有哪些配置项信息" tabindex="-1">tsconfig.json 中有哪些配置项信息？ <a class="header-anchor" href="#tsconfig-json-中有哪些配置项信息" aria-label="Permalink to &quot;tsconfig.json 中有哪些配置项信息？&quot;">​</a></h3><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">files</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[],</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[],</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exclude</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[],</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compileOnSave</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><code>files</code> 是一个数组列表，里面包含指定文件的相对或绝对路径，用来指定待编译文件，编译器在编译的时候只会编译包含在 files 中列出的文件。</li><li><code>include &amp; exclude</code> 指定编译某些文件，或者指定排除某些文件。</li><li><code>compileOnSave: true</code> 让 IDE 在保存文件的时候根据 tsconfig.json 重新生成文件。</li><li><code>extends</code> 可以通过指定一个其他的 tsconfig.json 文件路径，来继承这个配置文件里的配置。</li><li><code>compilerOptions</code> 编译配置项，如何对具体的 ts 文件进行编译</li></ul><h3 id="如何设置模块导入的路径别名" tabindex="-1">如何设置模块导入的路径别名？ <a class="header-anchor" href="#如何设置模块导入的路径别名" aria-label="Permalink to &quot;如何设置模块导入的路径别名？&quot;">​</a></h3><p>通过 tsconfig.json 中的 paths 项来配置:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">baseUrl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">paths</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">@helper/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/helper/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">@utils/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/utils/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">//  ...</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="declare-declare-global-是什么" tabindex="-1">declare，declare global 是什么？ <a class="header-anchor" href="#declare-declare-global-是什么" aria-label="Permalink to &quot;declare，declare global 是什么？&quot;">​</a></h3><ul><li><code>declare</code> 是用来定义全局变量、全局函数、全局命名空间、js modules、class 等</li><li><code>declare global</code> 为全局对象 <code>window</code> 增加新的属性</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> global </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">interface</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Window</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    csrf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解" tabindex="-1">对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？ <a class="header-anchor" href="#对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解" aria-label="Permalink to &quot;对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？&quot;">​</a></h3><ul><li><code>public</code>: 成员都默认为 <code>public</code>，被此限定符修饰的成员是可以被外部访问；</li><li><code>private</code>: 被此限定符修饰的成员是只可以被类的内部访问；</li><li><code>protected</code>: 被此限定符修饰的成员是只可以被类的内部以及类的子类访问;</li><li><code>readonly</code>: 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</li></ul><h3 id="keyof-和-typeof-关键字的作用" tabindex="-1">keyof 和 typeof 关键字的作用？ <a class="header-anchor" href="#keyof-和-typeof-关键字的作用" aria-label="Permalink to &quot;keyof 和 typeof 关键字的作用？&quot;">​</a></h3><ul><li><code>keyof</code> 索引类型查询操作符 获取索引类型的属性名，构成联合类型。</li><li><code>typeof</code> 获取一个变量或对象的类型。</li></ul><h3 id="简述工具类型-exclude、omit、merge、intersection、overwrite-的作用。" tabindex="-1">简述工具类型 Exclude、Omit、Merge、Intersection、Overwrite 的作用。 <a class="header-anchor" href="#简述工具类型-exclude、omit、merge、intersection、overwrite-的作用。" aria-label="Permalink to &quot;简述工具类型 Exclude、Omit、Merge、Intersection、Overwrite 的作用。&quot;">​</a></h3><ul><li><code>Exclude&lt;T, U&gt;</code> 从  <code>T</code>  中排除出可分配给 <code>U</code> 的元素。</li><li><code>Omit&lt;T, K&gt;</code> 的作用是忽略 <code>T</code> 中的某些属性。</li><li><code>Merge&lt;O1, O2&gt;</code> 是将两个对象的属性合并。</li><li><code>Compute&lt;A &amp; B&gt;</code> 是将交叉类型合并</li><li><code>Intersection&lt;T, U&gt;</code> 的作用是取 <code>T</code> 的属性,此属性同样也存在与 <code>U</code>。</li><li><code>Overwrite&lt;T, U&gt;</code> 是用 <code>U</code> 的属性覆盖 <code>T</code> 的相同属性。</li></ul><h3 id="数组定义的两种方式" tabindex="-1">数组定义的两种方式 <a class="header-anchor" href="#数组定义的两种方式" aria-label="Permalink to &quot;数组定义的两种方式&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bar</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">baz</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bar</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">baz</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>参考：</p><ul><li><a href="https://github.com/cloudyan/learn-typescript/blob/main/docs/tsconfig.md" target="_blank" rel="noreferrer">tsconfig.json 配置项说明</a></li><li><a href="https://juejin.cn/post/6999985372440559624" target="_blank" rel="noreferrer">TypeScript TS「面试题及答案」不断更新</a></li><li><a href="https://juejin.cn/post/7157149049714376735" target="_blank" rel="noreferrer">https://juejin.cn/post/7157149049714376735</a></li></ul>',71)];const r=s(p,[["render",function(s,l,e,p,r,t){return n(),a("div",null,o)}]]);export{e as __pageData,r as default};
