import{_ as s,o as n,c as a,V as l}from"./chunks/framework.75ed6a74.js";const p=JSON.parse('{"title":"数据类型隐式转换规律","description":"","frontmatter":{},"headers":[{"level":3,"title":"隐式中涉及的三种转换","slug":"隐式中涉及的三种转换","link":"#隐式中涉及的三种转换","children":[]},{"level":3,"title":"算术运算中的隐私转换","slug":"算术运算中的隐私转换","link":"#算术运算中的隐私转换","children":[]},{"level":3,"title":"比较运算隐式转换---不同类型的简单类型比较时，先向 Number 转，再向 String 类型","slug":"比较运算隐式转换-不同类型的简单类型比较时-先向-number-转-再向-string-类型","link":"#比较运算隐式转换-不同类型的简单类型比较时-先向-number-转-再向-string-类型","children":[]},{"level":3,"title":"对象类型转换步骤","slug":"对象类型转换步骤","link":"#对象类型转换步骤","children":[]}],"relativePath":"frontend/js/type-transfer.md","filePath":"frontend/js/type-transfer.md"}'),e={name:"frontend/js/type-transfer.md"},o=[l('<h1 id="数据类型隐式转换规律" tabindex="-1">数据类型隐式转换规律 <a class="header-anchor" href="#数据类型隐式转换规律" aria-label="Permalink to &quot;数据类型隐式转换规律&quot;">​</a></h1><ol><li>原始基础类型：Undefined、Null、String、Number、Boolean、Symbol、Object、bigInt</li><li>JS 内置对象：Date, Array, Math, Number, Boolean, String, Array, RegExp, Function, Error。</li></ol><h3 id="隐式中涉及的三种转换" tabindex="-1">隐式中涉及的三种转换 <a class="header-anchor" href="#隐式中涉及的三种转换" aria-label="Permalink to &quot;隐式中涉及的三种转换&quot;">​</a></h3><ol><li><p>对象转换为原始值，ToPrimitive(input, PreferredType)</p><ol><li><p>PreferredType 被标记为<code>Number</code></p><ol><li>如果输入值是原始值，则直接返回</li><li>否则如果输入的值是一个对象，则调用对象的 <code>valueOf()</code> 方法；如果 valueof() 返回的是一个原始值，则返回这个原始值。</li><li>否则调用对象<code>toString()</code>方法，如果返回的是一个原始值，则返回原始值；否则抛出 TypeError 异常</li></ol></li><li><p>PreferredType 被标记为<code>String</code></p><ol><li>如果输入值是原始值，则直接返回</li><li>否则调用对象的<code>toString()</code>方法；如果 toString() 返回的是一个原始值，则返回这个原始值。</li><li>否则输入的值是一个对象，则调用该对象的<code>valueOf()</code>，如果返回的是一个原始值，则返回原始值；否则抛出 TypeError 异常</li></ol></li><li><p>无参数 PreferredType 时</p><ol><li>该对象为 Date 类型，则 PreferredType 被设置为<code>String</code></li><li>否则 PreferredType 被设置为<code>Number</code></li></ol></li></ol></li></ol><ul><li>值转换为数字即 ToNumber()</li></ul><table><thead><tr><th>参数</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td>undefined</td><td style="text-align:center;"><code>NaN</code></td></tr><tr><td>null</td><td style="text-align:center;"><code>+0</code></td></tr><tr><td>布尔值</td><td style="text-align:center;">true 转换 1，false 转换为<code>+0</code></td></tr><tr><td>数字</td><td style="text-align:center;">无须转换</td></tr><tr><td>字符串</td><td style="text-align:center;">有字符串解析为数字，例如：‘324’转换为 324，‘qwer’转换为 NaN</td></tr><tr><td>对象 (obj)</td><td style="text-align:center;">先进行 ToPrimitive(obj, Number) 转换得到原始值，在进行<code>ToNumber</code>转换为数字</td></tr></tbody></table><ul><li>值转换为字符串即 ToString()</li></ul><table><thead><tr><th>参数</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td>undefined</td><td style="text-align:center;">&#39;undefined&#39;</td></tr><tr><td>null</td><td style="text-align:center;">&#39;null&#39;</td></tr><tr><td>布尔值</td><td style="text-align:center;">转换为&#39;true&#39; 或 &#39;false&#39;</td></tr><tr><td>数字</td><td style="text-align:center;">数字转换字符串，比如：1.765 转为&#39;1.765&#39;</td></tr><tr><td>字符串</td><td style="text-align:center;">无须转换</td></tr><tr><td>对象 (obj)</td><td style="text-align:center;">先进行 ToPrimitive(obj, String) 转换得到原始值，在进行<code>ToString</code>转换为字符串</td></tr></tbody></table><ul><li>valueOf() 与 toString() 是 Object.prototype 上的属性，故所有对象都拥有。</li><li>Number, Boolean, String 这三种构造函数生成基础值的对象形式</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 123</span></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">12df</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &#39;12df&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> bool </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">bool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>Date 特殊对象</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 1515143895500</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>除此之外返回的都是 this，即对象本身</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> a </span><span style="color:#676E95;font-style:italic;">// true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> b </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>toString() 方法 <ul><li>Number、Boolean、String、Array、Date、RegExp、Function 这几种构造函数生成的对象，通过 toString 转换后会变成相应的字符串的形式，因为这些构造函数上封装了自己的 toString 方法。如：</li></ul></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">toString</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>\n<span class="line"><span style="color:#FFCB6B;">Boolean</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">toString</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>\n<span class="line"><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">toString</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>\n<span class="line"><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">toString</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>\n<span class="line"><span style="color:#FFCB6B;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">toString</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>\n<span class="line"><span style="color:#FFCB6B;">RegExp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">toString</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>\n<span class="line"><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">toString</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123sd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &#39;NaN&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">12df</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &#39;12df&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> bool </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">bool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &#39;true&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &#39;1,2&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &quot;Wed Oct 11 2017 08:00:00 GMT+0800 (中国标准时间)&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> func </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#A6ACCD;">func</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &quot;function () {}&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><ul><li>除这些对象及其实例化对象之外，其他对象返回的都是该对象的类型，(有问题欢迎告知)，都是继承的 Object.prototype.toString 方法。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &quot;[object Object]&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &quot;[object Math]&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>故：从 valueOf() 与 toString() 函数对对象的转换可知，对于 ToPrimitive(input, preferredType)，<code>preferredType没有设定时</code>，除<code>Date</code>被设置为<code>String</code>类型外，其他会被设置为 Number；</p><p>因为<code>valueOf</code>将 Number、String、Boolean<code>基础类型的对象类型</code>转换为基础类型，<code>Data转换为毫秒数</code>，其他返回为对象本身；而<code>toString</code>会将所有对象转换为字符串，显然 valueOf 转换更合理些</p><p>因此先将<code>PreferredType</code>设置为<code>Number</code>类型，进行 valueOf 转换；而 Date 类型的对象，没有设定 PreferredType 时，默认设置为<code>String</code></p></div><h3 id="算术运算中的隐私转换" tabindex="-1">算术运算中的隐私转换 <a class="header-anchor" href="#算术运算中的隐私转换" aria-label="Permalink to &quot;算术运算中的隐私转换&quot;">​</a></h3><ol><li><p>({} + {}) = ?</p><ol><li>两个对象的值进行 + 运算符，肯定要先进行隐式转换为原始类型才能进行计算。</li><li>进行 ToPrimitive 转换，由于没有指定<code>PreferredType</code>类型，{}会使默认值为 Number，进行 ToPrimitive(input, Number) 运算。</li><li>所以会执行<code>valueOf方法</code>，({}).valueOf(),返回的还是{}对象，不是原始值。</li><li>继续执行<code>toString方法</code>，({}).toString(),返回&quot;[object Object]&quot;，是原始值。 故得到最终的结果，&quot;[object Object]&quot; + &quot;[object Object]&quot; = &quot;[object Object][object Object]&quot;</li></ol></li><li><p>2 * {} = ?</p><ol><li>首先*运算符只能对 number 类型进行运算，故第一步就是对{}进行<code>ToNumber</code>类型转换。</li><li>由于{}是对象类型，故先进行原始类型转换，ToPrimitive(input, Number) 运算。</li><li>所以会执行<code>valueOf</code>方法，({}).valueOf(),返回的还是{}对象，不是原始值。</li><li>继续执行 toString 方法，({}).toString(),返回&quot;[object Object]&quot;，是原始值。</li><li>转换为原始值后再进行 ToNumber 运算，&quot;[object Object]&quot;就转换为 NaN。 故最终的结果为 <code>2 * NaN = NaN</code></li></ol></li></ol><h3 id="比较运算隐式转换-不同类型的简单类型比较时-先向-number-转-再向-string-类型" tabindex="-1">比较运算隐式转换---不同类型的简单类型比较时，先向 Number 转，再向 String 类型 <a class="header-anchor" href="#比较运算隐式转换-不同类型的简单类型比较时-先向-number-转-再向-string-类型" aria-label="Permalink to &quot;比较运算隐式转换---不同类型的简单类型比较时，先向 Number 转，再向 String 类型&quot;">​</a></h3><ol><li>比较运算 x==y, 其中 x 和 y 是值，返回 true 或者 false。这样的比较按如下方式进行： <ol><li>若 Type(x) 与 Type(y) 类型相同，则 <ol><li>若 Type(x) 与 Type(y) 为 Undefined，返回 true。</li><li>若 Type(x) 与 Type(y) 为 Null，返回 true。</li><li>若 Type(x) 与 Type(y) 为 Number，则 <ol><li>若 x 为 NaN，返回 false。</li><li>若 y 为 NaN，返回 false。</li><li>若 x 与 y 为相等数值，返回 true。</li><li>若 x 为 +0 且 y 为 −0，返回 true。</li><li>若 x 为 −0 且 y 为 +0，返回 true。</li><li>返回 false。</li></ol></li><li>若 Type(x) 与 Type(y) 为 String, 则当 x 和 y 为完全相同的字符序列（长度相等且相同字符在相同位置）时返回 true。否则，返回 false。</li><li>若 Type(x) 与 Type(y) 为 Boolean, 当 x 和 y 为同为 true 或者同为 false 时返回 true。否则，返回 false。</li><li>当 x 和 y 为引用同一对象时返回 true。否则，返回 false。</li></ol></li><li>若 x 为 null 且 y 为 undefined，返回 true。</li><li>若 x 为 undefined 且 y 为 null，返回 true。</li><li>若 Type(x) 为 <code>Number</code> 且 Type(y) 为 <code>String</code>，返回比较 x == ToNumber(y) 的结果。</li><li>若 Type(x) 为 <code>String</code> 且 Type(y) 为 <code>Number</code>，返回比较 ToNumber(x) == y 的结果。</li><li>若 Type(x) 为 <code>Boolean</code>，返回比较 ToNumber(x) == y 的结果。</li><li>若 Type(y) 为 <code>Boolean</code>，返回比较 x == ToNumber(y) 的结果。</li><li>若 Type(x) 为 <code>String 或 Number</code>，且 Type(y) 为 <code>Object</code>，返回比较 x == ToPrimitive(y) 的结果。</li><li>若 Type(x) 为 <code>Object</code> 且 Type(y) 为 <code>String 或 Number</code>，返回比较 ToPrimitive(x) == y 的结果。</li><li>其他情况返回 false。</li></ol></li></ol><h3 id="对象类型转换步骤" tabindex="-1">对象类型转换步骤 <a class="header-anchor" href="#对象类型转换步骤" aria-label="Permalink to &quot;对象类型转换步骤&quot;">​</a></h3><ul><li>Object 与 Number，把 Object.valueOf() 和 Object.toString() 转换为基本数字类型</li><li>数组类型转换，通过 toString()--&gt;Array.join() 等于 shift 操作 取出第一个元素</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p>x、y 类型相同时：</p><ol><li>Number 类型时，NaN 与 NaN 不相待</li><li>对象时，需要是引用同一个对象</li></ol></li><li><p>和类型不相同时：</p><ol><li>x,y 为 null、undefined 两者中一个则相等</li><li>x、y 为 Number 和 String 类型时，则转换为 Number 类型比较。</li><li>有 Boolean 类型时，Boolean 转化为 Number 类型比较。</li><li>一个 Object 类型，一个 String 或 Number 类型，将 Object 类型进行原始转换后，按上面流程进行原始值比较。 :::</li></ol></li></ul><h3 id="重写-valueof-与-tostring-方法的例子" tabindex="-1">重写 valueOf 与 toString 方法的例子 <a class="header-anchor" href="#重写-valueof-与-tostring-方法的例子" aria-label="Permalink to &quot;重写 valueOf 与 toString 方法的例子&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> a </span><span style="color:#676E95;font-style:italic;">// true;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="分析下面表达式的运算过程" tabindex="-1">分析下面表达式的运算过程 <a class="header-anchor" href="#分析下面表达式的运算过程" aria-label="Permalink to &quot;分析下面表达式的运算过程&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">[] </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!{}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>! 运算符优先级高于==，故先进行！运算。</li><li>!{}运算结果为 false，结果变成 [] == false 比较。</li><li>等式右边 y = ToNumber(false) = 0。结果变成 [] == 0。</li><li>比较变成 ToPrimitive([]) == 0。 <ol><li>按照上面规则进行原始值转换，[]会先调用 <code>valueOf()</code>，返回 this。</li><li>valueOf() 的结果不是原始值，继续调用 toString 方法，x = [].toString() = &#39;&#39;。</li></ol></li><li>故结果为 &#39;&#39; == 0 比较。</li><li>等式左边 x = ToNumber(&#39;&#39;) = 0。</li><li>所以结果变为：0 == 0，返回 true，比较结束。</li></ol><p>使 a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3 成立的方案</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 解一</span></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 解二</span></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 解三</span></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>\n<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 这里要 window，这样的话下面才能直接使用 a 变量去 ==</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">val</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 试分析该段代码</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (a </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div>',26)];const t=s(e,[["render",function(s,l,p,e,t,r){return n(),a("div",null,o)}]]);export{p as __pageData,t as default};
