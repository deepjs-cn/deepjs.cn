import{_ as s,o as n,c as a,V as l}from"./chunks/framework.75ed6a74.js";const e=JSON.parse('{"title":"造一个 redux-thunk 轮子","description":"","frontmatter":{},"headers":[{"level":2,"title":"几个问题","slug":"几个问题","link":"#几个问题","children":[{"level":3,"title":"redux-thunk 到底解决了什么问题？","slug":"redux-thunk-到底解决了什么问题","link":"#redux-thunk-到底解决了什么问题","children":[]},{"level":3,"title":"dispatch 到底是异步的还是同步的？","slug":"dispatch-到底是异步的还是同步的","link":"#dispatch-到底是异步的还是同步的","children":[]},{"level":3,"title":"要不要使用 redux-thunk？","slug":"要不要使用-redux-thunk","link":"#要不要使用-redux-thunk","children":[]}]}],"relativePath":"mini/diy-redux-thunk/index.md","filePath":"mini/diy-redux-thunk/index.md"}'),p={name:"mini/diy-redux-thunk/index.md"},t=[l('<h1 id="造一个-redux-thunk-轮子" tabindex="-1">造一个 redux-thunk 轮子 <a class="header-anchor" href="#造一个-redux-thunk-轮子" aria-label="Permalink to &quot;造一个 redux-thunk 轮子&quot;">​</a></h1><details class="details custom-block"><summary>点我查看详细</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// prettier-ignore</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createThunkMiddleware</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">extraArgument</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">store</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 从 store 中结构出 dispatch, getState</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dispatch</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">store</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果 action 是函数，将它拿出来运行，参数就是 dispatch 和 getState</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">action</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 这里还可以传入 extraArgument</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">action</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">dispatch</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getState</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">extraArgument</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 否则按照普通 action 处理</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">action</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> thunkMiddleware </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createThunkMiddleware</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">thunkMiddleware</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">withExtraArgument </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> createThunkMiddleware</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> thunkMiddleware</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></details><p>相关 pattern</p><ul><li>redux-thunk <code>dispach(actionFunction)</code></li><li>redux-saga <code>dispatch(actionGenerator)</code></li><li>redux-promise <code>dispach(acitonPromise)</code></li><li>redux-observable <code>RxJs</code></li><li>redux-loop</li></ul><h2 id="几个问题" tabindex="-1">几个问题 <a class="header-anchor" href="#几个问题" aria-label="Permalink to &quot;几个问题&quot;">​</a></h2><h3 id="redux-thunk-到底解决了什么问题" tabindex="-1">redux-thunk 到底解决了什么问题？ <a class="header-anchor" href="#redux-thunk-到底解决了什么问题" aria-label="Permalink to &quot;redux-thunk 到底解决了什么问题？&quot;">​</a></h3><p>支持 <code>dispatch</code> 传入函数</p><h3 id="dispatch-到底是异步的还是同步的" tabindex="-1">dispatch 到底是异步的还是同步的？ <a class="header-anchor" href="#dispatch-到底是异步的还是同步的" aria-label="Permalink to &quot;dispatch 到底是异步的还是同步的？&quot;">​</a></h3><p>最原始的 <code>dispatch</code> 函数一定是个同步函数。</p><p>类似 <code>await dispatch(getUserById(id))</code> 经过中间件扩展，<code>getUserById(id)</code> 是异步的，导致最终 <code>dispatch</code> 执行结果也是异步的。</p><h3 id="要不要使用-redux-thunk" tabindex="-1">要不要使用 redux-thunk？ <a class="header-anchor" href="#要不要使用-redux-thunk" aria-label="Permalink to &quot;要不要使用 redux-thunk？&quot;">​</a></h3><p>redux-thunk 只是提供一种代码书写的 pattern，对提取公共代码是有帮助的。</p><p>是否使用看自己的场景，是否有大量的重复代码可提取为公共代码。</p><p>参考：</p><ul><li><a href="https://github.com/haixiangyan/my-redux-thunk" target="_blank" rel="noreferrer">https://github.com/haixiangyan/my-redux-thunk</a></li></ul>',15)];const o=s(p,[["render",function(s,l,e,p,o,r){return n(),a("div",null,t)}]]);export{e as __pageData,o as default};
