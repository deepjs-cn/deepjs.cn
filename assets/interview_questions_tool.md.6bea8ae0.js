import{_ as s,o as a,c as n,V as e}from"./chunks/framework.75ed6a74.js";const l=JSON.parse('{"title":"常用工具","description":"","frontmatter":{},"headers":[{"level":3,"title":"GIT","slug":"git","link":"#git","children":[]}],"relativePath":"interview/questions/tool.md","filePath":"interview/questions/tool.md"}'),t={name:"interview/questions/tool.md"},r=[e('<h1 id="常用工具" tabindex="-1">常用工具 <a class="header-anchor" href="#常用工具" aria-label="Permalink to &quot;常用工具&quot;">​</a></h1><h3 id="git" tabindex="-1">GIT <a class="header-anchor" href="#git" aria-label="Permalink to &quot;GIT&quot;">​</a></h3><h4 id="_1-git-与-svn-的区别在哪里" tabindex="-1">1. git 与 svn 的区别在哪里？ <a class="header-anchor" href="#_1-git-与-svn-的区别在哪里" aria-label="Permalink to &quot;1. git 与 svn 的区别在哪里？&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git 和 svn 最大的区别在于 git 是分布式的，而 svn 是集中式的。因此我们不能再离线的情况下使用 svn。如果服务器</span></span>\n<span class="line"><span style="color:#A6ACCD;">出现问题，我们就没有办法使用 svn 来提交我们的代码。</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">svn 中的分支是整个版本库的复制的一份完整目录，而 git 的分支是指针指向某次提交，因此 git 的分支创建更加开销更小</span></span>\n<span class="line"><span style="color:#A6ACCD;">并且分支上的变化不会影响到其他人。svn 的分支变化会影响到所有的人。</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">svn 的指令相对于 git 来说要简单一些，比 git 更容易上手。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>详细资料可以参考： <a href="https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83" target="_blank" rel="noreferrer">《常见工作流比较》</a><a href="https://juejin.im/post/5bd95bf4f265da392c5307eb" target="_blank" rel="noreferrer">《对比 Git 与 SVN，这篇讲的很易懂》</a><a href="https://blog.csdn.net/github_33304260/article/details/80171456" target="_blank" rel="noreferrer">《GIT 与 SVN 世纪大战》</a><a href="https://www.jianshu.com/p/e8ad60710017" target="_blank" rel="noreferrer">《Git 学习小记之分支原理》</a></p><h4 id="_2-经常使用的-git-命令" tabindex="-1">2. 经常使用的 git 命令？ <a class="header-anchor" href="#_2-经常使用的-git-命令" aria-label="Permalink to &quot;2. 经常使用的 git 命令？&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git init                     // 新建 git 代码库</span></span>\n<span class="line"><span style="color:#A6ACCD;">git add                      // 添加指定文件到暂存区</span></span>\n<span class="line"><span style="color:#A6ACCD;">git rm                       // 删除工作区文件，并且将这次删除放入暂存区</span></span>\n<span class="line"><span style="color:#A6ACCD;">git commit -m [message]      // 提交暂存区到仓库区</span></span>\n<span class="line"><span style="color:#A6ACCD;">git branch                   // 列出所有分支</span></span>\n<span class="line"><span style="color:#A6ACCD;">git checkout -b [branch]     // 新建一个分支，并切换到该分支</span></span>\n<span class="line"><span style="color:#A6ACCD;">git status                   // 显示有变更的文件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>详细资料可以参考： <a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noreferrer">《常用 Git 命令清单》</a></p><h4 id="_3-git-pull-和-git-fetch-的区别" tabindex="-1">3. git pull 和 git fetch 的区别 <a class="header-anchor" href="#_3-git-pull-和-git-fetch-的区别" aria-label="Permalink to &quot;3. git pull 和 git fetch 的区别&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git fetch 只是将远程仓库的变化下载下来，并没有和本地分支合并。</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">git pull 会将远程仓库的变化下载下来，并和当前分支合并。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><a href="https://blog.csdn.net/weixin_41975655/article/details/82887273" target="_blank" rel="noreferrer">《详解 git pull 和 git fetch 的区别》</a></p><h4 id="_4-git-rebase-和-git-merge-的区别" tabindex="-1">4. git rebase 和 git merge 的区别 <a class="header-anchor" href="#_4-git-rebase-和-git-merge-的区别" aria-label="Permalink to &quot;4. git rebase 和 git merge 的区别&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git merge 和 git rebase 都是用于分支合并，关键在 commit 记录的处理上不同。</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">git merge 会新建一个新的 commit 对象，然后两个分支以前的 commit 记录都指向这个新 commit 记录。这种方法会</span></span>\n<span class="line"><span style="color:#A6ACCD;">保留之前每个分支的 commit 历史。</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">git rebase 会先找到两个分支的第一个共同的 commit 祖先记录，然后将提取当前分支这之后的所有 commit 记录，然后</span></span>\n<span class="line"><span style="color:#A6ACCD;">将这个 commit 记录添加到目标分支的最新提交后面。经过这个合并后，两个分支合并后的 commit 记录就变为了线性的记</span></span>\n<span class="line"><span style="color:#A6ACCD;">录了。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><a href="https://www.jianshu.com/p/f23f72251abc" target="_blank" rel="noreferrer">《git rebase 和 git merge 的区别》</a><a href="https://blog.csdn.net/liuxiaoheng1992/article/details/79108233" target="_blank" rel="noreferrer">《git merge 与 git rebase 的区别》</a></p><p>参考</p><ul><li><a href="https://github.com/CavsZhouyou/Front-End-Interview-Notebook/blob/master/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7.md" target="_blank" rel="noreferrer">https://github.com/CavsZhouyou/Front-End-Interview-Notebook/blob/master/工具/工具.md</a></li></ul>',16)];const i=s(t,[["render",function(s,e,l,t,i,p){return a(),n("div",null,r)}]]);export{l as __pageData,i as default};
