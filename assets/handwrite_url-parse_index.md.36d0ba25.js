import{_ as s,o as n,c as a,V as l}from"./chunks/framework.75ed6a74.js";const p=JSON.parse('{"title":"解析 URL 参数为对象","description":"","frontmatter":{},"headers":[{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"扩展阅读","slug":"扩展阅读","link":"#扩展阅读","children":[]}],"relativePath":"handwrite/url-parse/index.md","filePath":"handwrite/url-parse/index.md"}'),e={name:"handwrite/url-parse/index.md"},o=[l('<h1 id="解析-url-参数为对象" tabindex="-1">解析 URL 参数为对象 <a class="header-anchor" href="#解析-url-参数为对象" aria-label="Permalink to &quot;解析 URL 参数为对象&quot;">​</a></h1><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><p>实现一个函数解析 URL 参数为对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">=</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://www.domain.com/?user=anonymous&amp;id=123&amp;id=456&amp;city=%E5%8C%97%E4%BA%AC&amp;enabled</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parseParam</span><span style="color:#A6ACCD;">(url)</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(result)</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">/* 结果</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">{</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">  user: &#39;anonymous&#39;,</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">  id: [ 123, 456 ], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">  city: &#39;北京&#39;,      // 中文需解码</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">  enabled: true,    // 未指定值得 key 约定为 true</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">}</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 实现</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parseParam</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">paramsStr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">\\?</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">+)</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exec</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">] </span><span style="color:#676E95;font-style:italic;">// 将 ? 后面的字符串取出来</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">paramsArr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">paramsStr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&amp;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 将字符串以 &amp; 分割后存到数组中</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">paramsObj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 将 params 存到对象中</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">paramsArr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 处理有 value 的参数</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 分割 key 和 value</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">decodeURIComponent</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 解码</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">parseFloat</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 判断是否转为数字</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">paramsObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 如果对象有 key，则添加一个值</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">paramsObj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">paramsObj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 如果对象没有这个 key，创建 key 并设置值</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">paramsObj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 处理没有 value 的参数</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">paramsObj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">param</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">paramsObj</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h2 id="扩展阅读" tabindex="-1">扩展阅读 <a class="header-anchor" href="#扩展阅读" aria-label="Permalink to &quot;扩展阅读&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 正则表达式解析 url</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> parse_url </span><span style="color:#89DDFF;">=</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#89DDFF;">(?:([</span><span style="color:#C3E88D;">A-Za-z</span><span style="color:#89DDFF;">]+)</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">)?(</span><span style="color:#A6ACCD;">\\/</span><span style="color:#89DDFF;">{0,3})([</span><span style="color:#C3E88D;">0-9.\\-A-Za-z</span><span style="color:#89DDFF;">]+)(?:</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">+))?(?:</span><span style="color:#A6ACCD;">\\/</span><span style="color:#89DDFF;">([^</span><span style="color:#C3E88D;">?#</span><span style="color:#89DDFF;">]*))?(?:</span><span style="color:#A6ACCD;">\\?</span><span style="color:#89DDFF;">([^</span><span style="color:#C3E88D;">#</span><span style="color:#89DDFF;">]*))?(?:</span><span style="color:#C3E88D;">#</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">*))?</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">var a1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">http://nodejs.cn/api/url.html#url_url_strings_and_url_objects</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(parse_url))</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 1、捕获型分组：(...)</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 2、非捕获型分组：(?: .....)</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 3、向前正向匹配：(?=........)</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 4、向前负向匹配：(?!.........)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>第一个分组</p><p>整个正则因子是匹配一个协议名：<code>http</code></p><ol><li><code>^</code>表示字符串的开始</li><li><code>(?: )</code>表示一个非捕获型分组：即在这个括号内的，但是不在其子括号内所匹配到的字符将不放入结果数组中。</li><li><code>()</code>表示一个捕获型分组，此括号内所匹配到的字符放入结果数组中对应 url 中的：<code>http字符</code></li><li><code>[]</code>为正则表达式类，表示符合中括号内任一一个字符。</li><li><code>A-Za-z</code>表示字母 A 到字母 Z，字母 a 到字母 z。<code>[A-Za-z]</code>表示符合字母 A 到字母 Z，字母 a 到字母 z 的任一一个字符</li><li><code>+</code>表示匹配 1 次货多次</li><li><code>?</code>表示此组为可选匹配条件</li></ol><p>第二个正则因子：</p><ul><li><code>(\\/{0,3})</code>😕/ 捕获型分组，/表示一个应该被匹配的/，<code>{0,3}</code>表示\\将被匹配 0 次或者 1 到 3 次之间</li><li><code>([0-9.\\-A-Za-z]+)</code>:qiji123.kerlai.net 捕获型分组，由一个或多个数字，“.”，”-“(转义成” - “)，字母 A 到 Z 和字母 a 到 z 组成</li><li><code>(?::(\\d+))?</code>：81 前置：放在非捕获型分组中将不会出现在返回数组中，\\d 表示匹配数字。整个因子就是匹配前置为：后面跟随一个或多个数字。此分组因子为可选的</li><li><code>(?:\\/([^?#]*))?</code>：GoodsBasic/Operate/12678 该分组由/开始，^在此处表示非的意思，即除?#之外的所有字符 最后一个？表示此正则因子分组可选</li><li><code>(?:\\?([^#]*))?</code> ：q 该分组表示包含 0 个或多个非#字符</li><li><code>(?:#(.*))?</code>：simen 该分组以#开始，(.) 将匹配除结束符以外的所有字符。</li><li>$表示这个字符串结束。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"> * http://nodejs.cn/api/url.html#url_url_strings_and_url_objects</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"> * http://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">┌─────────────────────────────────────────────────────────────────────────────────────────────┐</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">│                                            href                                             │</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">├──────────┬──┬─────────────────────┬─────────────────────┬───────────────────────────┬───────┤</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">│ protocol │  │        auth         │        host         │           path            │ hash  │</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">│          │  │                     ├──────────────┬──────┼──────────┬────────────────┤       │</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">│          │  │                     │   hostname   │ port │ pathname │     search     │       │</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">│          │  │                     │              │      │          ├─┬──────────────┤       │</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">│          │  │                     │              │      │          │ │    query     │       │</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">&quot;  https:   //    user   :   pass   @ sub.host.com : 8080   /p/a/t/h  ?  query=string   #hash &quot;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">│          │  │          │          │   hostname   │ port │          │                │       │</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">│          │  │          │          ├──────────────┴──────┤          │                │       │</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">│ protocol │  │ username │ password │        host         │          │                │       │</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">├──────────┴──┴──────────┴──────────┴─────────────────────┤          │                │       │</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">│                       origin                            │ pathname │     search     │ hash  │</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">├─────────────────────────────────────────────────────────┴──────────┴────────────────┴───────┤</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">│                                            href                                             │</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">└─────────────────────────────────────────────────────────────────────────────────────────────┘</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// const url = require(&#39;url&#39;);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// export const URL = url.URL;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>',12)];const c=s(e,[["render",function(s,l,p,e,c,r){return n(),a("div",null,o)}]]);export{p as __pageData,c as default};
