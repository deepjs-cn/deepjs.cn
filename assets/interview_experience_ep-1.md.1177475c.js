import{_ as s,o as l,c as n,V as a}from"./chunks/framework.75ed6a74.js";const p=JSON.parse('{"title":"[面经] 5 年前端 - 历时 1 个月收获 7 个 offer🔥","description":"","frontmatter":{},"headers":[{"level":3,"title":"滴滴","slug":"滴滴","link":"#滴滴","children":[]},{"level":3,"title":"58","slug":"_58","link":"#_58","children":[]},{"level":3,"title":"金山","slug":"金山","link":"#金山","children":[]},{"level":3,"title":"便利蜂","slug":"便利蜂","link":"#便利蜂","children":[]},{"level":3,"title":"小红书","slug":"小红书","link":"#小红书","children":[]},{"level":3,"title":"UMU","slug":"umu","link":"#umu","children":[]},{"level":3,"title":"网易","slug":"网易","link":"#网易","children":[]},{"level":3,"title":"快手","slug":"快手","link":"#快手","children":[]},{"level":3,"title":"高德","slug":"高德","link":"#高德","children":[]},{"level":3,"title":"Shopee","slug":"shopee","link":"#shopee","children":[]},{"level":3,"title":"腾讯","slug":"腾讯","link":"#腾讯","children":[]},{"level":3,"title":"字节","slug":"字节","link":"#字节","children":[]}],"relativePath":"interview/experience/ep-1.md","filePath":"interview/experience/ep-1.md"}'),o={name:"interview/experience/ep-1.md"},e=[a('<h1 id="面经-5-年前端-历时-1-个月收获-7-个-offer🔥" tabindex="-1">[面经] 5 年前端 - 历时 1 个月收获 7 个 offer🔥 <a class="header-anchor" href="#面经-5-年前端-历时-1-个月收获-7-个-offer🔥" aria-label="Permalink to &quot;[面经] 5 年前端 - 历时 1 个月收获 7 个 offer🔥&quot;">​</a></h1><p>来源： <a href="https://juejin.cn/post/7142690757722243102" target="_blank" rel="noreferrer">https://juejin.cn/post/7142690757722243102</a></p><h3 id="滴滴" tabindex="-1">滴滴 <a class="header-anchor" href="#滴滴" aria-label="Permalink to &quot;滴滴&quot;">​</a></h3><ul><li>闭包是什么? 闭包的用途?</li><li>简述事件循环原理</li><li>虚拟 dom 是什么? 原理? 优缺点?</li><li>vue 和 react 在虚拟 dom 的 diff 上，做了哪些改进使得速度很快?</li><li>vue 和 react 里的 key 的作用是什么? 为什么不能用 Index？用了会怎样? 如果不加 key 会怎样?</li><li>vue 双向绑定的原理是什么?</li><li>vue 的 keep-alive 的作用是什么？怎么实现的？如何刷新的?</li><li>vue 是怎么解析 template 的? template 会变成什么?</li><li>如何解析指令? 模板变量? html 标签</li><li>用过 vue 的 render 吗? render 和 template 有什么关系</li></ul><p>代码</p><p><strong><code>【代码题】</code></strong>  实现一个节流函数? 如果想要最后一次必须执行的话怎么实现? <strong><code>【代码题】</code></strong>  实现一个批量请求函数, 能够限制并发量? <strong><code>【代码题】</code></strong>  数组转树结构 <strong><code>【代码题】</code></strong>  去除字符串中出现次数最少的字符，不改变原字符串的顺序。 <strong><code>【代码题】</code></strong>  写出一个函数 trans，将数字转换成汉语的输出，输入为不超过 10000 亿的数字。</p><h3 id="_58" tabindex="-1">58 <a class="header-anchor" href="#_58" aria-label="Permalink to &quot;58&quot;">​</a></h3><ul><li>对前端工程化的理解</li><li>前端性能优化都做了哪些工作</li><li>Nodejs 异步 IO 模型</li><li>libuv</li><li>设计模式</li><li>微前端</li><li>节流和防抖</li><li>react 有自己封装一些自定义 hooks 吗? vue 有自己封装一些指令吗</li><li>vue 向 react 迁移是怎么做的? 怎么保证兼容的</li><li>vue 的双向绑定原理</li><li>Node 的日志和负载均衡怎么做的</li><li>那前后端的分工是怎样的？哪些后端做哪些 node 做</li><li>给出代码的输出顺序（字节 promise 面试题）</li></ul><p>代码</p><p><strong><code>【代码题】</code></strong>  给几个数组, 可以通过数值找到对应的数组名称</p><ul><li>了解过 vue3 吗?</li><li>websocket 的连接原理</li><li>react 生命周期</li><li>redux 原理</li><li>vue 父子组件的通信方式</li><li>async await 的原理是什么?</li><li>async/await, generator, promise 这三者的关联和区别是什么?</li></ul><p><strong><code>【场景设计】</code></strong>  设计一个转盘组件, 需要考虑什么, 需要和业务方协调好哪些技术细节? 前端如何防刷</p><p><strong><code>【代码题】</code></strong>  数组转树, 写完后问如果要在树中新增节点或者删除节点, 函数应该怎么扩展</p><ul><li>虚拟列表怎么实现?</li><li>做过哪些性能优化?</li></ul><h3 id="金山" tabindex="-1">金山 <a class="header-anchor" href="#金山" aria-label="Permalink to &quot;金山&quot;">​</a></h3><ul><li>react 和 vue 在技术层面的区别</li><li>常用的 hook 都有哪些?</li><li>用 hook 都遇到过哪些坑?</li><li>了解 useReducer 吗</li><li>组件外侧 let a 1 组件内侧点击事件更改 a，渲染的 a 会发生改变吗？如果 let a 放在组件内部，有什么变化吗？和 useState 有什么区别？</li><li>了解过 vue3 吗?</li><li>Node 是怎么部署的? pm2 守护进程的原理?</li><li>Node 开启子进程的方法有哪些?</li><li>进程间如何通信?</li><li>css 三列等宽布局如何实现? flex 1 是代表什么意思？分别有哪些属性?</li><li>前端安全都了解哪些? xss csrf <ul><li>csp 是为了解决什么问题的?</li><li>https 是如何安全通信的?</li></ul></li><li>前端性能优化做了哪些工作?</li></ul><p><strong><code>【代码题】</code></strong> 不定长二维数组的全排列 <strong><code>【代码题】</code></strong>  两个字符串对比, 得出结论都做了什么操作, 比如插入或者删除</p><p><strong><code>【场景设计】</code></strong>  大数据列表如何设计平滑滚动和加载，下滑再上滑的操作，上下两个 buffer 区间如何变化和加载数据。</p><h3 id="便利蜂" tabindex="-1">便利蜂 <a class="header-anchor" href="#便利蜂" aria-label="Permalink to &quot;便利蜂&quot;">​</a></h3><ul><li>js 中的闭包</li><li>解决过的一些线上问题</li><li>线上监控 对于 crashed 这种怎么监控? 对于内存持续增长，比如用了 15 分钟之后才会出现问题怎么监控</li><li>对于 linux 熟吗? top 命令的属性大概聊一下?</li><li>301 302 304 的区别</li></ul><p><strong><code>【代码题】</code></strong> sleep 函数 <strong><code>【代码题】</code></strong>  节流防抖</p><h3 id="小红书" tabindex="-1">小红书 <a class="header-anchor" href="#小红书" aria-label="Permalink to &quot;小红书&quot;">​</a></h3><ul><li><p>输出什么? 为什么?</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>\n<span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">b</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>代码输出顺序题</p></li><li><p>async await 的原理是什么?</p></li><li><p>async/await, generator, promise 这三者的关联和区别是什么?</p></li><li><p>BFC 是什么? 哪些属性可以构成一个 BFC 呢?</p></li><li><p>postion 属性大概讲一下, static 是什么表现? static 在文档流里吗?</p></li><li><p>Webpack 的原理, plugin loader 热更新等等</p></li><li><p>Set 和 Map</p></li><li><p>vue 的 keep-alive 原理以及生命周期</p></li><li><p>vuex</p></li></ul><p><strong><code>【代码题】</code></strong> ES5 和 ES6 的继承? 这两种方式除了写法, 还有其他区别吗?</p><p><strong><code>【代码题】</code></strong> EventEmitter</p><ul><li>浏览器从输入 url 开始发生了什么</li><li>react 生命周期</li><li>redux 的原理</li><li>vue 父子组件的通信方式</li><li>vue 的双向绑定原理</li><li>对 vue3 的了解? vue3 是怎么做的双向绑定?</li></ul><p><strong><code>【代码题】</code></strong> 使用 Promise 实现一个异步流量控制的函数, 比如一共 10 个请求, 每个请求的快慢不同, 最多同时 3 个请求发出, 快的一个请求返回后, 就从剩下的 7 个请求里再找一个放进请求池里, 如此循环。</p><h3 id="umu" tabindex="-1">UMU <a class="header-anchor" href="#umu" aria-label="Permalink to &quot;UMU&quot;">​</a></h3><ul><li><p>node.js 如何调试</p></li><li><p>charles map local/map remote</p></li><li><p>chrome devtool 如何查看内存情况</p></li><li><p>koa 洋葱模型</p></li><li><p>中间件的异常处理是怎么做的？</p></li><li><p>在没有 async await 的时候, koa 是怎么实现的洋葱模型?</p></li><li><p>body-parser 中间件了解过吗</p></li><li><p>如果浏览器端用 post 接口上传图片和一些其他字段, header 里会有什么? koa 里如果不用 body-parser，应该怎么解析?</p></li><li><p>webscoket 的连接原理</p></li><li><p>https 是如何保证安全的? 是如何保证不被中间人攻击的?</p><p><strong><code>【代码题】</code></strong>  给一个字符串, 找到第一个不重复的字符</p><ul><li>时间复杂度是多少?</li><li>除了给的两个用例, 还能想到什么用例来测试一下?</li></ul></li></ul><h3 id="网易" tabindex="-1">网易 <a class="header-anchor" href="#网易" aria-label="Permalink to &quot;网易&quot;">​</a></h3><ul><li>你觉得 js 里 this 的设计怎么样? 有没有什么缺点啥的</li><li>vue 的响应式开发比命令式有什么好处</li><li>装饰器</li><li>vuex</li><li>generator 是如何做到中断和恢复的</li><li>function 和 箭头函数的定义有什么区别? 导致了在 this 指向这块表现不同</li><li>导致 js 里 this 指向混乱的原因是什么?</li><li>浏览器的事件循环</li><li>宏任务和微任务的区分是为了做什么? 优先级?</li></ul><p><strong><code>【代码题】</code></strong> 实现 compose 函数, 类似于 koa 的中间件洋葱模型</p><p><strong><code>【代码题】</code></strong>  遇到退格字符就删除前面的字符, 遇到两个退格就删除两个字符</p><h3 id="快手" tabindex="-1">快手 <a class="header-anchor" href="#快手" aria-label="Permalink to &quot;快手&quot;">​</a></h3><ul><li>小程序的架构? 双线程分别做的什么事情?</li><li>为什么小程序里拿不到 dom 相关的 api</li><li>代码输出题</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>this 指向题</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">456</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">a</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong><code>【代码题】</code></strong>  实现一个函数, 可以间隔输出</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createRepeat</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">repeat</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">interval</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createRepeat</span><span style="color:#A6ACCD;">(console</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">log</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">helloWorld</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 每4秒输出一次helloWorld, 输出3次</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong><code>【代码题】</code></strong>  删除链表的一个节点</p><p><strong><code>【代码题】</code></strong>  实现 LRU 算法</p><ul><li>Promise then 第二个参数和 catch 的区别是什么?</li><li>Promise finally 怎么实现的</li><li>作用域链</li><li>Electron 架构</li><li>微前端</li><li>webpack5 模块联邦</li><li>Webworker</li></ul><h3 id="高德" tabindex="-1">高德 <a class="header-anchor" href="#高德" aria-label="Permalink to &quot;高德&quot;">​</a></h3><ul><li>Symbol</li><li>useRef / ref / forwardsRef 的区别是什么?</li><li>useEffect 的第二个参数, 传空数组和传依赖数组有什么区别? <ul><li>如果 return 了一个函数, 传空数组的话是在什么时候执行? 传依赖数组的时候是在什么时候执行?</li></ul></li><li>flex 布局</li><li>ES5 继承</li><li>ES6 继承, 静态方法/属性和实例方法/属性 是什么时候挂载的</li><li>Promise 各种 api</li><li>各种 css 属性</li></ul><h3 id="shopee" tabindex="-1">Shopee <a class="header-anchor" href="#shopee" aria-label="Permalink to &quot;Shopee&quot;">​</a></h3><ul><li>各种缓存的优先级, memory disk http2 push?</li><li>小程序为什么会有两个线程? 怎么设计?</li><li>xss? 如何防范?</li><li>日志 如果大量日志堆在内存里怎么办?</li></ul><p><strong><code>【代码题】</code></strong>  深拷贝</p><p><strong><code>【代码题】</code></strong>  二叉树光照，输出能被光照到的节点, dfs 能否解决?</p><ul><li><strong>【代码题】</strong>  输出顺序题（Promise）</li></ul><p><strong><code>【代码题】</code></strong>  作用域</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">c</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">c</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong><code>【代码题】</code></strong>  输出题</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#FFCB6B;">Foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">a</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">a</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">a</span><span style="color:#A6ACCD;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li>错误捕捉</li><li>前端稳定性监控</li><li>前端内存处理</li></ul><p><strong><code>【代码题】</code></strong>  好多请求, 耗时不同, 按照顺序输出, 尽可能保证快, 写一个函数</p><p><strong><code>【代码题】</code></strong>  一个数组的全排列</p><h3 id="腾讯" tabindex="-1">腾讯 <a class="header-anchor" href="#腾讯" aria-label="Permalink to &quot;腾讯&quot;">​</a></h3><ul><li>普通函数和箭头函数的 this 指向问题</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">fn1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">fn2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn1</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn2</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn1</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn2</span><span style="color:#A6ACCD;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>promise 相关的特性</li><li>vue 父子组件, 生命周期执行顺序 created mounted</li><li>vue3 添加了哪些新特性?</li><li>xss 的特点以及如何防范?</li><li>Http 2.0 和 http3.0 对比之前的版本, 分别做了哪些改进?</li><li>HTTP 3.0 基于 udp 的话, 如何保证可靠的传输?</li><li>TCP 和 UDP 最大的区别是什么?</li><li>CSP 除了能防止加载外域脚本, 还能做什么?</li><li>typescript is 这个关键字是做什么呢?</li></ul><p><strong><code>【代码题】</code></strong> 多叉树, 获取每一层的节点之和</p><p><strong><code>【代码题】</code></strong>  虚拟 dom 转真实 dom</p><ul><li>前端安全 xss 之类的</li><li>Https 中间人攻击</li><li>前端 History 路由配置 nginx</li></ul><p><strong><code>【代码题】</code></strong>  有序数组原地去重</p><p>如何估算一个城市中的井盖数量</p><h3 id="字节" tabindex="-1">字节 <a class="header-anchor" href="#字节" aria-label="Permalink to &quot;字节&quot;">​</a></h3><p><strong><code>【代码题】</code></strong>  二叉树层序遍历, 每层的节点放到一个数组里</p><p><strong><code>【代码题】</code></strong>  实现一个函数, fetchWithRetry 会自动重试 3 次，任意一次成功直接返回</p><p><strong><code>【代码题】</code></strong>  链表中环的入口节点</p><ul><li>截图怎么实现</li><li>qps 达到峰值了，怎么去优化</li><li>谷歌图片, 如果要实现一个类似的系统或者页面, 你会怎么做?</li><li>最小的 k 个数</li><li>节流防抖</li><li>sleep 函数</li><li>js 超过 Number 最大值的数怎么处理?</li><li>64 个运动员, 8 个跑道, 如果要选出前四名, 至少跑几次?</li><li>前端路由 a -&gt; b -&gt; c 这样前进, 也可以返回 c -&gt; b -&gt; a, 用什么数据结构来存比较高效</li><li>node 服务治理</li></ul><p><strong><code>【代码题】</code></strong> 多叉树指定层节点的个数</p><p><strong><code>【代码题】</code></strong>  叠词的数量</p>',73)];const r=s(o,[["render",function(s,a,p,o,r,t){return l(),n("div",null,e)}]]);export{p as __pageData,r as default};
