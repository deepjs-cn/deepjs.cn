import{_ as s,H as n,o as a,c as l,C as p,a as e,J as o,V as t}from"./chunks/framework.75ed6a74.js";const r=JSON.parse('{"title":"React 中涉及的基本概念","description":"","frontmatter":{},"headers":[{"level":3,"title":"JSX","slug":"jsx","link":"#jsx","children":[]},{"level":3,"title":"ReactElement 结构","slug":"reactelement-结构","link":"#reactelement-结构","children":[]},{"level":3,"title":"Fiber 结构","slug":"fiber-结构","link":"#fiber-结构","children":[]},{"level":3,"title":"JSX, ReactElement, Fiber 及 DOM 的关系","slug":"jsx-reactelement-fiber-及-dom-的关系","link":"#jsx-reactelement-fiber-及-dom-的关系","children":[]},{"level":3,"title":"React 的启动","slug":"react-的启动","link":"#react-的启动","children":[]},{"level":3,"title":"react 初始化时的三个全局对象","slug":"react-初始化时的三个全局对象","link":"#react-初始化时的三个全局对象","children":[]},{"level":3,"title":"update 与 UpdateQueue 对象","slug":"update-与-updatequeue-对象","link":"#update-与-updatequeue-对象","children":[]},{"level":3,"title":"Hook","slug":"hook","link":"#hook","children":[]},{"level":2,"title":"scheduler 包","slug":"scheduler-包","link":"#scheduler-包","children":[{"level":3,"title":"Task 对象","slug":"task-对象","link":"#task-对象","children":[]}]}],"relativePath":"framework/react/react-conception.md","filePath":"framework/react/react-conception.md"}'),c={name:"framework/react/react-conception.md"},y=t('<h1 id="react-中涉及的基本概念" tabindex="-1">React 中涉及的基本概念 <a class="header-anchor" href="#react-中涉及的基本概念" aria-label="Permalink to &quot;React 中涉及的基本概念&quot;">​</a></h1><h3 id="jsx" tabindex="-1">JSX <a class="header-anchor" href="#jsx" aria-label="Permalink to &quot;JSX&quot;">​</a></h3><p>采用 JSX 语法书写的节点, 都会被编译器转换, 最终会以 React.createElement(...)的方式, 创建出来一个与之对应的 ReactElement 对象.</p><h3 id="reactelement-结构" tabindex="-1">ReactElement 结构 <a class="header-anchor" href="#reactelement-结构" aria-label="Permalink to &quot;ReactElement 结构&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReactElement</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{|</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 可以是：字符串 dom 节点--直接使用；函数： function、class类型--调用其 render 方法获取子节点 或 调用该方法获取子节点；内部自定义节点类型</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$$typeof</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 内部属性</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 表明其种类</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">ref</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ReactFiber 记录创建本对象的Fiber节点, 还未与Fiber树关联之前, 该属性为null</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">_owner</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// __DEV__ dev环境下的一些额外信息, 如文件路径, 文件名, 行列信息等</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">_store</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">validated</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">_self</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React$Element</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">_shadowChildren</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">_source</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Source</span></span>\n<span class="line"><span style="color:#89DDFF;">|}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>ReactComponent 是 class 类型, 继承父类 Component <ul><li>拥有特殊的方法(setState,forceUpdate)和特殊的属性(context,updater 等).</li><li>在 reconciler 阶段, 会依据 ReactElement 对象的特征, 生成对应的 fiber 节点. 当识别到 ReactElement 对象是 class 类型的时候, 会触发 ReactComponent 对象的生命周期, 并调用其 render 方法, 生成 ReactElement 子节点. <ul><li>在 render 之后(reconciler 阶段)才生成的，父级对象和子级对象之间是通过 props.children 属性进行关联的</li><li>ReactElement 树(暂且用树来表述)和 fiber 树是以 props.children 为单位先后交替生成的，当 ReactElement 树构造完毕, fiber 树也随后构造完毕.</li><li>reconciler 阶段会根据 ReactElement 的类型生成对应的 fiber 节点(不是一一对应, 比如 Fragment 类型的组件在生成 fiber 节点的时候会略过).</li></ul></li></ul></li><li>function 类型 <ul><li>如果在 function 类型的组件中没有使用 Hook，在 reconciler 阶段所有有关 Hook 的处理都会略过, 最后调用该 function 拿到子节点 ReactElement.</li><li>如果使用了 Hook</li></ul></li></ul><h3 id="fiber-结构" tabindex="-1">Fiber 结构 <a class="header-anchor" href="#fiber-结构" aria-label="Permalink to &quot;Fiber 结构&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{|</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">tag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WorkTag</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// fiber 的类型，根据ReactElement组件的 type 进行生成</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 和ReactElement组件的 key 一致.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">elementType</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//一般来讲和ReactElement组件的 type 一致 比如div ul</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 一般来讲和fiber.elementType一致. 一些特殊情形下, 比如在开发环境下为了兼容热更新</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">stateNode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 真实DOM是谁</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">return</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//爹是谁</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">child</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//孩子是谁</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sibling</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//兄弟是谁</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">index</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//fiber 在兄弟节点中的索引</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">ref</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//指向在 ReactElement 组件上设置的 ref</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">null</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">((</span><span style="color:#A6ACCD;font-style:italic;">handle</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mixed</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;">) &amp; </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">_stringRef</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#F07178;"> })</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">RefObject</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//指向在ReactElement组件上设置的 ref</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">pendingProps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">any</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 从`ReactElement`对象传入的 props. 用于和`fiber.memoizedProps`比较可以得出属性是否变动</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">memoizedProps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">any</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 上一次生成子节点时用到的属性, 生成子节点之后保持在内存中，用于比较 pendingProps 和 memoizedProps 是否变动</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">updateQueue</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mixed</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 存储state更新的队列, 当前节点的state改动之后, 都会创建一个update对象添加到这个队列中.</span></span>\n<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">memoizedState</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">any</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 用于输出的state, 最终渲染所使用的state</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">dependencies</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Dependencies</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 该fiber节点所依赖的(contexts, events)等</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">TypeOfMode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 二进制位Bitfield,继承至父节点,影响本fiber节点及其子树中所有节点. 与react应用的运行模式有关(有ConcurrentMode, BlockingMode, NoMode等选项).</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 优先级相关</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">lanes</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Lanes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 本fiber节点的优先级</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">childLanes</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Lanes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 子节点的优先级</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">alternate</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Fiber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 双fiber缓存 指向内存中的另一个fiber, 每个被更新过fiber节点在内存中都是成对出现(current和workInProgress)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">nextEffect</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Fiber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 单向链表, 指向下一个有副作用的fiber节点</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">firstEffect</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Fiber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 指向副作用链表中的第一个fiber节点</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">lastEffect</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Fiber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 指向副作用链表中的最后一个fiber节点</span></span>\n<span class="line"><span style="color:#89DDFF;">|}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="jsx-reactelement-fiber-及-dom-的关系" tabindex="-1">JSX, ReactElement, Fiber 及 DOM 的关系 <a class="header-anchor" href="#jsx-reactelement-fiber-及-dom-的关系" aria-label="Permalink to &quot;JSX, ReactElement, Fiber 及 DOM 的关系&quot;">​</a></h3><ul><li>根据 JSX 执行 render 后生成 ReactElement</li><li>根据 ReactElement 生成 fiber 树 <img src="/assets/conception-step-4.aacef5a3.png" alt="结构比对"></li><li>根据 fiber 树 生成 DOM</li></ul><h3 id="react-的启动" tabindex="-1">React 的启动 <a class="header-anchor" href="#react-的启动" aria-label="Permalink to &quot;React 的启动&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;"> /&gt;,</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">root</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">dom</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',12),D=p("p",null,[e("legacy 模式: ReactDOM.render("),p("code",null,"<App />"),e(", rootNode) 方法将组件渲染到指定的 DOM 节点上。这种模式不支持并发渲染，因此可能会导致页面卡顿和性能问题。")],-1),F=p("img",{src:"/assets/conception-step-1.be437423.png",alt:"第一步"},null,-1),i=p("li",null,[e("react 初始化 "),p("img",{src:"/assets/conception-step-2.15ad4820.png",alt:"初始化"})],-1),C=p("li",null,[e("此时 reactElement("),p("code",null,"<App/>"),e(")还是独立在外的, 还没有和目前创建的 3 个全局对象关联起来 "),p("img",{src:"/assets/conception-step-3.1369c699.png",alt:"对象关系图"})],-1),A=p("li",null,[e("目前 ReactElement, Fiber 及 DOM 三者之间的关系，fiber 树的构造过程就是把 ReactElement 转换为 fiber 树的过程，这个过程中内存中有 2 棵 fiber 树 "),p("ul",null,[p("li",null,"fiberRoot.current 为当前界面的 fiber 树，如果还没有渲染，那么 fiberRoot.current = null"),p("li",null,"正在构建的 fiber 树，节点为 workInProgress, 挂载到 HostRootFiber.alternage 上，构造完成后，重新渲染页面，最后切换 fiberRoot.current = workInProgress")])],-1),b=p("li",null,[p("p",null,[e("Blocking 模式: ReactDOM.unstable_createBlockingRoot(rootNode).render("),p("code",null,"<App />"),e(")，React 会先渲染完整个应用，然后再将其挂载到 DOM 上。这种模式能够提高应用的渲染性能，但也可能会导致首屏渲染时间过长。")])],-1),u=p("li",null,[p("p",null,[e("Concurrent 模式: ReactDOM.createRoot(rootNode).render("),p("code",null,"<App />"),e(")，会采用异步渲染的方式，将应用的渲染过程分成多个优先级不同的任务，并根据任务的优先级和可用时间动态地调整任务的执行顺序。这种模式可以提高应用的响应速度和用户体验，但也需要开发者仔细设计应用的架构和组件。")])],-1),d=t('<h3 id="react-初始化时的三个全局对象" tabindex="-1">react 初始化时的三个全局对象 <a class="header-anchor" href="#react-初始化时的三个全局对象" aria-label="Permalink to &quot;react 初始化时的三个全局对象&quot;">​</a></h3><ul><li>ReactDOMRoot：属于 react-dom 包，暴露了 render, unmount 方法，通过 ReatDOM。render 方法引导 react 应用的启动</li><li>fiberRoot：属于 react-reconciler 包，是<code>运行中的全局上下文</code>，保持 fiber 构建过程中所依赖的全局状态，存储<code>fiber构造循环</code>过程的各种状态，react 内部再根据这些值，执行控制逻辑。</li><li>HostRootFiber：属于 react-reconciler 包，是 React 应用中的第一个 Fiber 对象，是 Fiber 的根节点，类型为 HostRoot</li></ul><h3 id="update-与-updatequeue-对象" tabindex="-1">update 与 UpdateQueue 对象 <a class="header-anchor" href="#update-与-updatequeue-对象" aria-label="Permalink to &quot;update 与 UpdateQueue 对象&quot;">​</a></h3><p>fiber.updateQueue 是一个链式队列(即使用链表实现的队列存储结构)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">UpdateQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">|</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">baseState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> State</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//基础 state</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">firstBaseUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 基础队列的队首</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">lastBaseUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//基础队列的队尾</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">shared</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> SharedQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//共享队列</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">effects</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//保存有callback回调函数的 update 对象, 在commit之后, 会依次调用这里的回调函数.</span></span>\n<span class="line"><span style="color:#A6ACCD;">|</span><span style="color:#89DDFF;">};</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 指向即将输入的update队列，在class组件中调用setState()之后, 会将新的 update 对象添加到这个队列中来</span></span>\n<span class="line"><span style="color:#A6ACCD;">SharedQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">|</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">pending</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>\n<span class="line"><span style="color:#A6ACCD;">|</span><span style="color:#89DDFF;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">|</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">eventTime</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 发起update事件的时间(17.0.2中作为临时字段, 即将移出)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">lane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Lane</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// update所属的优先级</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">tag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// UpdateState,ReplaceState,ForceUpdate,CaptureUpdate</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">payload</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// update对象真正需要更新的数据, 可以设置成一个回调函数或者对象.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> mixed) </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 回调函数. commit完成之后会调用.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">next</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 指向链表中的下一个, 由于UpdateQueue是一个环形链表, 最后一个update.next指向第一个update对象</span></span>\n<span class="line"><span style="color:#A6ACCD;">|</span><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="hook" tabindex="-1">Hook <a class="header-anchor" href="#hook" aria-label="Permalink to &quot;Hook&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Hook </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">|</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">memoizedState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 内存状态, 用于输出成最终的fiber树</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">baseState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 基础状态, 当Hook.queue更新过后, baseState也会更新.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">baseQueue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> any&gt; | null</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 基础状态队列, 在reconciler阶段会辅助状态合并.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">queue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> UpdateQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> any&gt; | null</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 指向一个Update队列</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">next</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Hook </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 指向该function组件的下一个Hook对象, 使得多个Hook之间也构成了一个链表.</span></span>\n<span class="line"><span style="color:#A6ACCD;">|</span><span style="color:#89DDFF;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">|</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">lane</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Lane</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">action</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">eagerReducer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">A</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> S) </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">eagerState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> S </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">next</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> A&gt;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  priority?</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ReactPriorityLevel</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">|</span><span style="color:#89DDFF;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">UpdateQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">|</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">pending</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> A&gt; | null</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">dispatch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">A</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> mixed) </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">lastRenderedReducer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">A</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> S) </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">lastRenderedState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> S </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>\n<span class="line"><span style="color:#A6ACCD;">|</span><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="scheduler-包" tabindex="-1">scheduler 包 <a class="header-anchor" href="#scheduler-包" aria-label="Permalink to &quot;scheduler 包&quot;">​</a></h2><h3 id="task-对象" tabindex="-1">Task 对象 <a class="header-anchor" href="#task-对象" aria-label="Permalink to &quot;Task 对象&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// task 顺序是通过堆排序来实现的，没有next 属性(始终保证数组中的第一个task对象优先级最高).</span></span>\n<span class="line"><span style="color:#A6ACCD;">newTask </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> taskIdCounter</span><span style="color:#89DDFF;">++,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  callback</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 指向react-reconciler包所提供的回调函数.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  priorityLevel</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  startTime</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  expirationTime</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sortIndex</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 控制 task 在队列中的次序, 值越小的越靠前.</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',10);const m=s(c,[["render",function(s,t,r,c,m,f){const h=n("App");return a(),l("div",null,[y,p("ul",null,[p("li",null,[D,p("ul",null,[p("li",null,[e("在没有进入 render 阶段（react-reconciler 包）之前,reactElement("),o(h),e(")和 DOM 对象 div#root 之间没有关联。"),F]),i,C,A])]),b,u]),d])}]]);export{r as __pageData,m as default};
