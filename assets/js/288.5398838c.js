(window.webpackJsonp=window.webpackJsonp||[]).push([[288],{454:function(e,t,n){"use strict";n.r(t);var s={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},c=n(2),o=Object(c.a)(s,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.slotKey}},[n("p",[e._v("Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.")]),e._v(" "),n("p",[e._v("get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.\nput(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.")]),e._v(" "),n("p",[e._v("Follow up:\nCould you do both operations in O(1) time complexity?")]),e._v(" "),n("p",[e._v("Example:")]),e._v(" "),n("p",[e._v("LRUCache cache = new LRUCache( 2 /* capacity */ );")]),e._v(" "),n("p",[e._v("cache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // returns 1\ncache.put(3, 3);    // evicts key 2\ncache.get(2);       // returns -1 (not found)\ncache.put(4, 4);    // evicts key 1\ncache.get(1);       // returns -1 (not found)\ncache.get(3);       // returns 3\ncache.get(4);       // returns 4")])])},[],!1,null,null,null);o.options.__file="question.md";t.default=o.exports}}]);