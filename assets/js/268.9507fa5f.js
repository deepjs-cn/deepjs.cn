(window.webpackJsonp=window.webpackJsonp||[]).push([[268],{509:function(t,e,n){"use strict";n.r(e);var o={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},s=n(2),a=Object(s.a)(o,function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.slotKey}},[n("p",[t._v("Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:")]),t._v(" "),n("p",[t._v("Only one letter can be changed at a time\nEach transformed word must exist in the word list. Note that beginWord is not a transformed word.")]),t._v(" "),n("p",[t._v("For example,")]),t._v(" "),n("p",[t._v('Given:\nbeginWord = "hit"\nendWord = "cog"\nwordList = ["hot","dot","dog","lot","log","cog"]')]),t._v(" "),n("p",[t._v("Return")]),t._v(" "),n("p",[t._v('[\n["hit","hot","dot","dog","cog"],\n["hit","hot","lot","log","cog"]\n]')]),t._v(" "),n("p",[t._v("Note:")]),t._v(" "),n("p",[t._v("Return an empty list if there is no such transformation sequence.\nAll words have the same length.\nAll words contain only lowercase alphabetic characters.\nYou may assume no duplicates in the word list.\nYou may assume beginWord and endWord are non-empty and are not the same.")]),t._v(" "),n("p",[t._v("UPDATE (2017/1/20):\nThe wordList parameter had been changed to a list of strings (instead of a set of strings). Please reload the code definition to get the latest changes.")])])},[],!1,null,null,null);a.options.__file="question.md";e.default=a.exports}}]);