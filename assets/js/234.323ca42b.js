(window.webpackJsonp=window.webpackJsonp||[]).push([[234],{593:function(e,t,n){"use strict";n.r(t);var r={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},s=n(2),a=Object(s.a)(r,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.slotKey}},[n("p",[e._v("Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.")]),e._v(" "),n("p",[e._v('Below is one possible representation of s1 = "great":')]),e._v(" "),n("pre",[n("code",[e._v("great\n")])]),e._v(" "),n("p",[e._v("/    "),n("br"),e._v("\ngr    eat\n/ \\    /  "),n("br"),e._v("\ng   r  e   at\n/ "),n("br"),e._v("\na   t")]),e._v(" "),n("p",[e._v("To scramble the string, we may choose any non-leaf node and swap its two children.")]),e._v(" "),n("p",[e._v('For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".')]),e._v(" "),n("pre",[n("code",[e._v("rgeat\n")])]),e._v(" "),n("p",[e._v("/    "),n("br"),e._v("\nrg    eat\n/ \\    /  "),n("br"),e._v("\nr   g  e   at\n/ "),n("br"),e._v("\na   t")]),e._v(" "),n("p",[e._v('We say that "rgeat" is a scrambled string of "great".')]),e._v(" "),n("p",[e._v('Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".')]),e._v(" "),n("pre",[n("code",[e._v("rgtae\n")])]),e._v(" "),n("p",[e._v("/    "),n("br"),e._v("\nrg    tae\n/ \\    /  "),n("br"),e._v("\nr   g  ta  e\n/ "),n("br"),e._v("\nt   a")]),e._v(" "),n("p",[e._v('We say that "rgtae" is a scrambled string of "great".')]),e._v(" "),n("p",[e._v("Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.")])])},[],!1,null,null,null);a.options.__file="question.md";t.default=a.exports}}]);