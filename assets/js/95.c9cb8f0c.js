(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{412:function(a,t,e){"use strict";e.r(t);var s=e(8),r=Object(s.a)({},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h3",{attrs:{id:"explain-the-differences-between-imperative-and-declarative-programming"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#explain-the-differences-between-imperative-and-declarative-programming","aria-hidden":"true"}},[a._v("#")]),a._v(" Explain the differences between imperative and declarative programming.")]),a._v(" "),e("h4",{attrs:{id:"answer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#answer","aria-hidden":"true"}},[a._v("#")]),a._v(" Answer")]),a._v(" "),e("p",[a._v("These two types of programming can roughly be summarized as:")]),a._v(" "),e("ul",[e("li",[a._v("Imperative: "),e("strong",[a._v("how")]),a._v(" to achieve something")]),a._v(" "),e("li",[a._v("Declarative: "),e("strong",[a._v("what")]),a._v(" should be achieved")])]),a._v(" "),e("p",[a._v('A common example of declarative programming is CSS. The developer specifies CSS properties that describe what something should look like rather than how to achieve it. The "how" is abstracted away by the browser.')]),a._v(" "),e("p",[a._v("On the other hand, imperative programming involves the steps required to achieve something. In JavaScript, the differences can be contrasted like so:")]),a._v(" "),e("h5",{attrs:{id:"imperative"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#imperative","aria-hidden":"true"}},[a._v("#")]),a._v(" Imperative")]),a._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" numbers "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" numbersDoubled "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" numbers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  numbersDoubled"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" numbers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("p",[a._v("Wet manually loop over the numbers of the array and assign the new index as the number doubled.")]),a._v(" "),e("h5",{attrs:{id:"declarative"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#declarative","aria-hidden":"true"}},[a._v("#")]),a._v(" Declarative")]),a._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" numbers "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" numbersDoubled "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" numbers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("map")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" n "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),e("p",[a._v("We declare that the new array is mapped to a new one where each value is doubled.")]),a._v(" "),e("h4",{attrs:{id:"good-to-hear"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#good-to-hear","aria-hidden":"true"}},[a._v("#")]),a._v(" Good to hear")]),a._v(" "),e("ul",[e("li",[a._v("Declarative programming often works with functions and expressions. Imperative programming frequently uses statements and relies on low-level features that cause mutations, while declarative programming has a strong focus on abstraction and purity.")]),a._v(" "),e("li",[a._v("Declarative programming is more terse and easier to process at a glance.")])]),a._v(" "),e("h5",{attrs:{id:"additional-links"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#additional-links","aria-hidden":"true"}},[a._v("#")]),a._v(" Additional links")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://codeburst.io/declarative-vs-imperative-programming-a8a7c93d9ad2",target:"_blank",rel:"noopener noreferrer"}},[a._v("Declarative vs Imperative Programming"),e("OutboundLink")],1)])])])},[],!1,null,null,null);t.default=r.exports}}]);