(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{489:function(e,n,o){"use strict";o.r(n);var t={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},a=o(2),s=Object(a.a)(t,function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.slotKey}},[o("p",[e._v("Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.")]),e._v(" "),o("p",[e._v("OJ's undirected graph serialization:")]),e._v(" "),o("p",[e._v("Nodes are labeled uniquely.")]),e._v(" "),o("p",[e._v("We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.")]),e._v(" "),o("p",[e._v("As an example, consider the serialized graph {0,1,2#1,2#2,2}.")]),e._v(" "),o("p",[e._v("The graph has a total of three nodes, and therefore contains three parts as separated by #.")]),e._v(" "),o("p",[e._v("First node is labeled as 0. Connect node 0 to both nodes 1 and 2.\nSecond node is labeled as 1. Connect node 1 to node 2.\nThird node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.")]),e._v(" "),o("p",[e._v("Visually, the graph looks like the following:")]),e._v(" "),o("pre",[o("code",[e._v("   1\n  / \\\n /   \\\n0 --- 2\n     / \\\n     \\_/\n")])])])},[],!1,null,null,null);s.options.__file="question.md";n.default=s.exports}}]);