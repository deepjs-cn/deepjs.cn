(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{504:function(e,t,a){"use strict";a.r(t);var r=a(8),n=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"how-does-prototypal-inheritance-differ-from-classical-inheritance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-does-prototypal-inheritance-differ-from-classical-inheritance","aria-hidden":"true"}},[e._v("#")]),e._v(" How does prototypal inheritance differ from classical inheritance?")]),e._v(" "),a("h4",{attrs:{id:"answer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#answer","aria-hidden":"true"}},[e._v("#")]),e._v(" Answer")]),e._v(" "),a("p",[e._v("In the classical inheritance paradigm, object instances inherit their properties and functions from a class, which acts as a blueprint for the object. Object instances are typically created using a constructor and the "),a("code",[e._v("new")]),e._v(" keyword.")]),e._v(" "),a("p",[e._v("In the prototypal inheritance paradigm, object instances inherit directly from other objects and are typically created using factory functions or "),a("code",[e._v("Object.create()")]),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"good-to-hear"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#good-to-hear","aria-hidden":"true"}},[e._v("#")]),e._v(" Good to hear")]),e._v(" "),a("h5",{attrs:{id:"additional-links"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#additional-links","aria-hidden":"true"}},[e._v("#")]),e._v(" Additional links")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN docs for inheritance and the prototype chain"),a("OutboundLink")],1)])])])},[],!1,null,null,null);t.default=n.exports}}]);