(window.webpackJsonp=window.webpackJsonp||[]).push([[302],{409:function(e,t,n){"use strict";n.r(t);var o={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},i=n(2),s=Object(i.a)(o,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.slotKey}},[n("p",[e._v("Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.")]),e._v(" "),n("p",[e._v("For example:")]),e._v(" "),n("p",[e._v("Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].")]),e._v(" "),n("p",[e._v("Note:")]),e._v(" "),n("p",[e._v("The order of the result is not important. So in the above example, [5, 3] is also correct.\nYour algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?")]),e._v(" "),n("p",[e._v("Credits:Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.")])])},[],!1,null,null,null);s.options.__file="question.md";t.default=s.exports}}]);