(window.webpackJsonp=window.webpackJsonp||[]).push([[258],{534:function(e,t,n){"use strict";n.r(t);var o={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},r=n(2),i=Object(r.a)(o,function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.slotKey}},[n("p",[e._v("Given a binary tree")]),e._v(" "),n("pre",[n("code",[e._v("struct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}\n")])]),e._v(" "),n("p",[e._v("Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.")]),e._v(" "),n("p",[e._v("Initially, all next pointers are set to NULL.")]),e._v(" "),n("p",[e._v("Note:")]),e._v(" "),n("p",[e._v("You may only use constant extra space.\nYou may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).")]),e._v(" "),n("p",[e._v("For example,\nGiven the following perfect binary tree,")]),e._v(" "),n("pre",[n("code",[e._v("     1\n   /  \\\n  2    3\n / \\  / \\\n4  5  6  7\n")])]),e._v(" "),n("p",[e._v("After calling your function, the tree should look like:")]),e._v(" "),n("pre",[n("code",[e._v("     1 -> NULL\n   /  \\\n  2 -> 3 -> NULL\n / \\  / \\\n4->5->6->7 -> NULL\n")])])])},[],!1,null,null,null);i.options.__file="question.md";t.default=i.exports}}]);