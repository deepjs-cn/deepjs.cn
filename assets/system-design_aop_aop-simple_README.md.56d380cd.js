import{_ as e,o as i,c as t,V as o}from"./chunks/framework.75ed6a74.js";const a=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Cool stuff","slug":"cool-stuff","link":"#cool-stuff","children":[]},{"level":2,"title":"Limitations","slug":"limitations","link":"#limitations","children":[]}],"relativePath":"system-design/aop/aop-simple/README.md","filePath":"system-design/aop/aop-simple/README.md"}'),s={name:"system-design/aop/aop-simple/README.md"},n=[o('<p>This is a very simple (read: naive), but still quite useful, AOP implementation.</p><h2 id="cool-stuff" tabindex="-1">Cool stuff <a class="header-anchor" href="#cool-stuff" aria-label="Permalink to &quot;Cool stuff&quot;">​</a></h2><ol><li>It&#39;s only about 50 lines of JS for before, afterReturning, afterThrowing, after, and around advices.</li><li>The advices compose easily.</li></ol><h2 id="limitations" tabindex="-1">Limitations <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;Limitations&quot;">​</a></h2><p>There are things this implementation doesn&#39;t do well or doesn&#39;t account for:</p><ol><li>It creates deep stacks for all advice types. meld.js uses trampolines to execute all advice types except <code>around</code>, so stacks stay shallow.</li><li>There is no explicit way to &quot;remove&quot; advice. You can simply throw away the advised function and start using the original again to &quot;remove&quot;. meld.js provides an API for removing advices, even in a different order than they were added, i.e. you can &quot;yank&quot; an advice, even around advice, out of the middle of an advice chain, leaving all others intact.</li><li>There is no codified notion of a <em>joinpoint</em>, and thus no way to do more sophisticated things that may require access to a joinpoint. meld.js provides a joinpoint, and an API for accessing the current joinpoint from within any advice.</li><li>It doesn&#39;t handle advising constructors. meld.js can advice constructors, correctly preserving prototypes and <code>instanceof</code>.</li><li>It doesn&#39;t attempt to provide pointcut-based (query-based) advising--it simply advises functions. meld.js supports Array, RegExp, and function pointcut queries to query an object and advise all matching methods in a single call.</li></ol>',6)];const l=e(s,[["render",function(e,o,a,s,l,r){return i(),t("div",null,n)}]]);export{a as __pageData,l as default};
