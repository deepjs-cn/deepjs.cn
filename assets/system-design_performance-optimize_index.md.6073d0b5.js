import{_ as l,o as i,c as o,V as e}from"./chunks/framework.75ed6a74.js";const r=JSON.parse('{"title":"性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"system-design/performance-optimize/index.md","filePath":"system-design/performance-optimize/index.md"}'),t={name:"system-design/performance-optimize/index.md"},a=[e('<h1 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h1><p>性能优化不局限于首屏时间</p><p>目前指标：</p><ul><li>首屏时间满意度</li><li>首次渲染时间</li></ul><p>前端性能优化分析：</p><ol><li>从输入 url 到页面展示经历了哪些流程？</li><li>指标 <ol><li>真实指标</li><li>实验室指标</li><li>评估工具</li></ol></li><li>优化环节及方案 <ol><li>加载链路优化</li><li>加载体积优化</li><li>感官体验优化</li><li>执行渲染优化</li></ol></li><li>思考：性能优化对业务的影响</li></ol><p>优化之前，先确定衡量的指标，比如</p><ul><li>优化项针对 FPT 或 FMP，速度优化了多少？</li><li>优化项针对打包体积，体积优化了多少？对加载速度有影响？</li></ul><ol><li>加载链路优化 <ol><li>HTTP 缓存 2022-11-11 <ol><li>Service Worker</li><li>强缓存</li><li>协商缓存</li><li>工程化辅助支持（稳定性 hash, 延长强缓存有效性）</li></ol></li><li>DNS 预解析、预加载 <ol><li>域名收敛</li><li>dns-prefetch</li><li>httpdns(自家 app)</li><li>静态资源使用 CDN, 加速下载</li></ol></li><li>TCP 链接与 HTTP 协议 <ol><li>HTTP/1.1 <ol><li>keep alive 长连接</li><li>域名发散，图片并发请求限制</li><li>雪碧图</li></ol></li><li>HTTP/2 多路复用</li><li>HTTP/3</li><li>打包代码</li></ol></li><li>发送请求 <ol><li>减少请求数</li><li>小图片使用 base64 免去请求</li><li>网络请求优先级</li><li>资源 <ol><li>prefetch</li><li>preload</li><li>非核心代码异步加载，如低优先级三方代码</li></ol></li><li>页面 <ol><li>prerender</li></ol></li><li>请求合并 <ol><li>资源请求合并</li><li>API 请求合并</li></ol></li></ol></li><li>服务器处理请求 <ol><li>减少/避免重定向 301 永久/302 临时</li><li>使用 HSTS 强制 https，<a href="https://www.cnblogs.com/cswuyg/p/3871976.html" target="_blank" rel="noreferrer">307 临时</a></li></ol></li><li>发送响应 <ol><li>gzip 压缩资源</li><li>更好的格式 如 webp</li></ol></li><li>加载距离优化 <ol><li>CDN</li><li>预加载处理（自家 APP 内置资源/离线包）</li></ol></li><li>接口请求时间优化</li><li>首屏接口</li><li>合并接口</li><li>缓存接口</li><li>请求耗时分析</li><li>服务端渲染</li></ol></li><li>加载体积优化（能不加载就不加载、能少加载的就少加载） <ol><li>按需加载、懒加载 <ol><li>路由懒加载</li><li>模块懒加载</li><li>非首屏懒加载</li></ol></li><li>优化打包体积 2022-12-16 <ol><li>代码压缩 <ol><li>HTML</li><li>CSS</li><li>JS</li></ol></li><li>优化 core-js、polyfill，合理的 .browserslistrc</li><li>选用合适的 lib 库，如 moment → dayjs</li><li>合理的分包策略</li><li>避免版本依赖滥用（多个相似的 npm 包）</li></ol></li><li>传输压缩 <ol><li>Gzip</li><li>Brotli</li><li>预压缩（compression-webpack-plugin）</li></ol></li><li>图片、图片及字体优化 <ol><li>合适的文件格式（git,png8,png24,jpg,svg,webp,apng） <ol><li><a href="%5Bhttps://pag.art">pag</a>](<a href="https://pag.art" target="_blank" rel="noreferrer">https://pag.art</a>%29/)</li></ol></li><li>为不同分辨率提供不同的图片尺寸</li><li>压缩图片 <a href="https://tinypng.com" target="_blank" rel="noreferrer">https://tinypng.com</a></li><li>图片懒加载</li><li>小图优化 雪碧图、iconfont、svg</li><li>优化 svg <ol><li>svg-sprite-loader</li><li>svgo-loader</li></ol></li></ol></li></ol></li><li>感官体验优化 <ol><li>骨架屏</li><li>loading 动画（白屏时或路由跳转时）</li><li>加载占位图</li><li>渐进加载图片 <ol><li>先加载小图，模糊化选啊如，图片加载完成后替换为原图</li></ol></li><li>响应顺序优化 <ol><li>首屏优化</li><li>bigpipe</li></ol></li><li>接口缓存与 SWR（stale-while-revalidate）</li></ol></li><li>运行时优化 <ol><li>HTML</li><li>CSS <ol><li>减少回流</li></ol></li><li>JS <ol><li>合理使用缓存机制</li><li>减少同步加载</li><li>减少同步操作、执行</li><li>防抖与节流</li><li>虚拟列表优化</li></ol></li><li>流畅动画 <ol><li>requestAnimationFrame</li></ol></li></ol></li></ol>',9)];const p=l(t,[["render",function(l,e,r,t,p,s){return i(),o("div",null,a)}]]);export{r as __pageData,p as default};
